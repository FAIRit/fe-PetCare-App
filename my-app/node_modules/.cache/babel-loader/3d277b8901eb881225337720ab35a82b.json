{"ast":null,"code":"/*!\nFullCalendar Time Grid Plugin v4.4.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\nimport { createFormatter, removeElement, computeEventDraggable, computeEventStartResizable, computeEventEndResizable, cssToStr, isMultiDayRange, htmlEscape, compareByFieldSpecs, applyStyle, FgEventRenderer, buildSegCompareObj, FillRenderer, memoize, memoizeRendering, createDuration, wholeDivideDurations, findElements, PositionCache, startOfDay, asRoughMs, formatIsoTimeString, addDurations, htmlToElement, createElement, multiplyDuration, DateComponent, hasBgRendering, Splitter, diffDays, buildGotoAnchorHtml, getAllDayHtml, ScrollComponent, matchCellWidths, uncompensateScroll, compensateScroll, subtractInnerElHeight, View, intersectRanges, Slicer, DayHeader, DaySeries, DayTable, createPlugin } from '@fullcalendar/core';\nimport { DayBgRow, DayGrid, SimpleDayGrid } from '@fullcalendar/daygrid';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/*\nOnly handles foreground segs.\nDoes not own rendering. Use for low-level util methods by TimeGrid.\n*/\n\n\nvar TimeGridEventRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridEventRenderer, _super);\n\n  function TimeGridEventRenderer(timeGrid) {\n    var _this = _super.call(this) || this;\n\n    _this.timeGrid = timeGrid;\n    return _this;\n  }\n\n  TimeGridEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {\n    _super.prototype.renderSegs.call(this, context, segs, mirrorInfo); // TODO: dont do every time. memoize\n\n\n    this.fullTimeFormat = createFormatter({\n      hour: 'numeric',\n      minute: '2-digit',\n      separator: this.context.options.defaultRangeSeparator\n    });\n  }; // Given an array of foreground segments, render a DOM element for each, computes position,\n  // and attaches to the column inner-container elements.\n\n\n  TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n    var segsByCol = this.timeGrid.groupSegsByCol(segs); // order the segs within each column\n    // TODO: have groupSegsByCol do this?\n\n    for (var col = 0; col < segsByCol.length; col++) {\n      segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n    }\n\n    this.segsByCol = segsByCol;\n    this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n  };\n\n  TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n    segs.forEach(function (seg) {\n      removeElement(seg.el);\n    });\n    this.segsByCol = null;\n  };\n\n  TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n    var _a = this,\n        timeGrid = _a.timeGrid,\n        segsByCol = _a.segsByCol;\n\n    var colCnt = timeGrid.colCnt;\n    timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n\n    if (segsByCol) {\n      for (var col = 0; col < colCnt; col++) {\n        this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n      }\n    }\n  };\n\n  TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n    var _a = this,\n        timeGrid = _a.timeGrid,\n        segsByCol = _a.segsByCol;\n\n    var colCnt = timeGrid.colCnt;\n    timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n\n    if (segsByCol) {\n      for (var col = 0; col < colCnt; col++) {\n        this.assignSegCss(segsByCol[col]);\n      }\n    }\n  }; // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n\n\n  TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      meridiem: false\n    };\n  }; // Computes a default `displayEventEnd` value if one is not expliclty defined\n\n\n  TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n    return true;\n  }; // Renders the HTML for a single event segment's default rendering\n\n\n  TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n    var eventRange = seg.eventRange;\n    var eventDef = eventRange.def;\n    var eventUi = eventRange.ui;\n    var allDay = eventDef.allDay;\n    var isDraggable = computeEventDraggable(this.context, eventDef, eventUi);\n    var isResizableFromStart = seg.isStart && computeEventStartResizable(this.context, eventDef, eventUi);\n    var isResizableFromEnd = seg.isEnd && computeEventEndResizable(this.context, eventDef, eventUi);\n    var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n    var skinCss = cssToStr(this.getSkinCss(eventUi));\n    var timeText;\n    var fullTimeText; // more verbose time text. for the print stylesheet\n\n    var startTimeText; // just the start time text\n\n    classes.unshift('fc-time-grid-event'); // if the event appears to span more than one day...\n\n    if (isMultiDayRange(eventRange.range)) {\n      // Don't display time text on segments that run entirely through a day.\n      // That would appear as midnight-midnight and would look dumb.\n      // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n      if (seg.isStart || seg.isEnd) {\n        var unzonedStart = seg.start;\n        var unzonedEnd = seg.end;\n        timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n\n        fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n        startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n      }\n    } else {\n      // Display the normal time text for the *event's* times\n      timeText = this.getTimeText(eventRange);\n      fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n      startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n    }\n\n    return '<a class=\"' + classes.join(' ') + '\"' + (eventDef.url ? ' href=\"' + htmlEscape(eventDef.url) + '\"' : '') + (skinCss ? ' style=\"' + skinCss + '\"' : '') + '>' + '<div class=\"fc-content\">' + (timeText ? '<div class=\"fc-time\"' + ' data-start=\"' + htmlEscape(startTimeText) + '\"' + ' data-full=\"' + htmlEscape(fullTimeText) + '\"' + '>' + '<span>' + htmlEscape(timeText) + '</span>' + '</div>' : '') + (eventDef.title ? '<div class=\"fc-title\">' + htmlEscape(eventDef.title) + '</div>' : '') + '</div>' + (\n    /* TODO: write CSS for this\n    (isResizableFromStart ?\n      '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n      ''\n      ) +\n    */\n    isResizableFromEnd ? '<div class=\"fc-resizer fc-end-resizer\"></div>' : '') + '</a>';\n  }; // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n  // Assumed the segs are already ordered.\n  // NOTE: Also reorders the given array by date!\n\n\n  TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n    var levels;\n    var level0;\n    var i;\n    levels = buildSlotSegLevels(segs);\n    computeForwardSlotSegs(levels);\n\n    if (level0 = levels[0]) {\n      for (i = 0; i < level0.length; i++) {\n        computeSlotSegPressures(level0[i]);\n      }\n\n      for (i = 0; i < level0.length; i++) {\n        this.computeSegForwardBack(level0[i], 0, 0);\n      }\n    }\n  }; // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n  // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n  // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n  //\n  // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n  // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n  // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n  // coordinate of the first segment in the series.\n\n\n  TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n    var forwardSegs = seg.forwardSegs;\n    var i;\n\n    if (seg.forwardCoord === undefined) {\n      // not already computed\n      if (!forwardSegs.length) {\n        // if there are no forward segments, this segment should butt up against the edge\n        seg.forwardCoord = 1;\n      } else {\n        // sort highest pressure first\n        this.sortForwardSegs(forwardSegs); // this segment's forwardCoord will be calculated from the backwardCoord of the\n        // highest-pressure forward segment.\n\n        this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n        seg.forwardCoord = forwardSegs[0].backwardCoord;\n      } // calculate the backwardCoord from the forwardCoord. consider the series\n\n\n      seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / ( // available width for series\n      seriesBackwardPressure + 1); // # of segments in the series\n      // use this segment's coordinates to computed the coordinates of the less-pressurized\n      // forward segments\n\n      for (i = 0; i < forwardSegs.length; i++) {\n        this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n      }\n    }\n  };\n\n  TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n    var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n    var specs = [// put higher-pressure first\n    {\n      field: 'forwardPressure',\n      order: -1\n    }, // put segments that are closer to initial edge first (and favor ones with no coords yet)\n    {\n      field: 'backwardCoord',\n      order: 1\n    }].concat(this.context.eventOrderSpecs);\n    objs.sort(function (obj0, obj1) {\n      return compareByFieldSpecs(obj0, obj1, specs);\n    });\n    return objs.map(function (c) {\n      return c._seg;\n    });\n  }; // Given foreground event segments that have already had their position coordinates computed,\n  // assigns position-related CSS values to their elements.\n\n\n  TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n    for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n      var seg = segs_1[_i];\n      applyStyle(seg.el, this.generateSegCss(seg));\n\n      if (seg.level > 0) {\n        seg.el.classList.add('fc-time-grid-event-inset');\n      } // if the event is short that the title will be cut off,\n      // attach a className that condenses the title into the time area.\n\n\n      if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n        seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n      }\n    }\n  }; // Generates an object with CSS properties/values that should be applied to an event segment element.\n  // Contains important positioning-related properties that should be applied to any event element, customized or not.\n\n\n  TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n    var shouldOverlap = this.context.options.slotEventOverlap;\n    var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\n    var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\n    var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n\n    var isRtl = this.context.isRtl;\n    var left; // amount of space from left edge, a fraction of the total width\n\n    var right; // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n    }\n\n    if (isRtl) {\n      left = 1 - forwardCoord;\n      right = backwardCoord;\n    } else {\n      left = backwardCoord;\n      right = 1 - forwardCoord;\n    }\n\n    props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n\n    props.left = left * 100 + '%';\n    props.right = right * 100 + '%';\n\n    if (shouldOverlap && seg.forwardPressure) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n    }\n\n    return props;\n  };\n\n  return TimeGridEventRenderer;\n}(FgEventRenderer); // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n\n\nfunction buildSlotSegLevels(segs) {\n  var levels = [];\n  var i;\n  var seg;\n  var j;\n\n  for (i = 0; i < segs.length; i++) {\n    seg = segs[i]; // go through all the levels and stop on the first level where there are no collisions\n\n    for (j = 0; j < levels.length; j++) {\n      if (!computeSlotSegCollisions(seg, levels[j]).length) {\n        break;\n      }\n    }\n\n    seg.level = j;\n    (levels[j] || (levels[j] = [])).push(seg);\n  }\n\n  return levels;\n} // For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n\n\nfunction computeForwardSlotSegs(levels) {\n  var i;\n  var level;\n  var j;\n  var seg;\n  var k;\n\n  for (i = 0; i < levels.length; i++) {\n    level = levels[i];\n\n    for (j = 0; j < level.length; j++) {\n      seg = level[j];\n      seg.forwardSegs = [];\n\n      for (k = i + 1; k < levels.length; k++) {\n        computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n      }\n    }\n  }\n} // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n\n\nfunction computeSlotSegPressures(seg) {\n  var forwardSegs = seg.forwardSegs;\n  var forwardPressure = 0;\n  var i;\n  var forwardSeg;\n\n  if (seg.forwardPressure === undefined) {\n    // not already computed\n    for (i = 0; i < forwardSegs.length; i++) {\n      forwardSeg = forwardSegs[i]; // figure out the child's maximum forward path\n\n      computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure\n      // plus one (for the forwardSeg itself)\n\n      forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n    }\n\n    seg.forwardPressure = forwardPressure;\n  }\n} // Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\n\n\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n  if (results === void 0) {\n    results = [];\n  }\n\n  for (var i = 0; i < otherSegs.length; i++) {\n    if (isSlotSegCollision(seg, otherSegs[i])) {\n      results.push(otherSegs[i]);\n    }\n  }\n\n  return results;\n} // Do these segments occupy the same vertical space?\n\n\nfunction isSlotSegCollision(seg1, seg2) {\n  return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n}\n\nfunction buildTimeGridSegCompareObj(seg) {\n  var obj = buildSegCompareObj(seg);\n  obj.forwardPressure = seg.forwardPressure;\n  obj.backwardCoord = seg.backwardCoord;\n  return obj;\n}\n\nvar TimeGridMirrorRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridMirrorRenderer, _super);\n\n  function TimeGridMirrorRenderer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n    this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n    this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n    this.sourceSeg = mirrorInfo.sourceSeg;\n  };\n\n  TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n    var props = _super.prototype.generateSegCss.call(this, seg);\n\n    var sourceSeg = this.sourceSeg;\n\n    if (sourceSeg && sourceSeg.col === seg.col) {\n      var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n\n      props.left = sourceSegProps.left;\n      props.right = sourceSegProps.right;\n      props.marginLeft = sourceSegProps.marginLeft;\n      props.marginRight = sourceSegProps.marginRight;\n    }\n\n    return props;\n  };\n\n  return TimeGridMirrorRenderer;\n}(TimeGridEventRenderer);\n\nvar TimeGridFillRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridFillRenderer, _super);\n\n  function TimeGridFillRenderer(timeGrid) {\n    var _this = _super.call(this) || this;\n\n    _this.timeGrid = timeGrid;\n    return _this;\n  }\n\n  TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n    var timeGrid = this.timeGrid;\n    var containerEls; // TODO: more efficient lookup\n\n    if (type === 'bgEvent') {\n      containerEls = timeGrid.bgContainerEls;\n    } else if (type === 'businessHours') {\n      containerEls = timeGrid.businessContainerEls;\n    } else if (type === 'highlight') {\n      containerEls = timeGrid.highlightContainerEls;\n    }\n\n    timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n    return segs.map(function (seg) {\n      return seg.el;\n    });\n  };\n\n  TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n    this.timeGrid.computeSegVerticals(segs);\n  };\n\n  TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n    this.timeGrid.assignSegVerticals(segs);\n  };\n\n  return TimeGridFillRenderer;\n}(FillRenderer);\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\n\n\nvar AGENDA_STOCK_SUB_DURATIONS = [{\n  hours: 1\n}, {\n  minutes: 30\n}, {\n  minutes: 15\n}, {\n  seconds: 30\n}, {\n  seconds: 15\n}];\n\nvar TimeGrid =\n/** @class */\nfunction (_super) {\n  __extends(TimeGrid, _super);\n\n  function TimeGrid(el, renderProps) {\n    var _this = _super.call(this, el) || this;\n\n    _this.isSlatSizesDirty = false;\n    _this.isColSizesDirty = false;\n    _this.processOptions = memoize(_this._processOptions);\n    _this.renderSkeleton = memoizeRendering(_this._renderSkeleton);\n    _this.renderSlats = memoizeRendering(_this._renderSlats, null, [_this.renderSkeleton]);\n    _this.renderColumns = memoizeRendering(_this._renderColumns, _this._unrenderColumns, [_this.renderSkeleton]);\n    _this.renderProps = renderProps;\n    var renderColumns = _this.renderColumns;\n    var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n    var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n    _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n    _this.renderBusinessHours = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n    _this.renderDateSelection = memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n    _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n    _this.renderBgEvents = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n    _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n    _this.renderEventDrag = memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n    _this.renderEventResize = memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n    return _this;\n  }\n  /* Options\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Parses various options into properties of this object\n  // MUST have context already set\n\n\n  TimeGrid.prototype._processOptions = function (options) {\n    var slotDuration = options.slotDuration,\n        snapDuration = options.snapDuration;\n    var snapsPerSlot;\n    var input;\n    slotDuration = createDuration(slotDuration);\n    snapDuration = snapDuration ? createDuration(snapDuration) : slotDuration;\n    snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n\n    if (snapsPerSlot === null) {\n      snapDuration = slotDuration;\n      snapsPerSlot = 1; // TODO: say warning?\n    }\n\n    this.slotDuration = slotDuration;\n    this.snapDuration = snapDuration;\n    this.snapsPerSlot = snapsPerSlot; // might be an array value (for TimelineView).\n    // if so, getting the most granular entry (the last one probably).\n\n    input = options.slotLabelFormat;\n\n    if (Array.isArray(input)) {\n      input = input[input.length - 1];\n    }\n\n    this.labelFormat = createFormatter(input || {\n      hour: 'numeric',\n      minute: '2-digit',\n      omitZeroMinute: true,\n      meridiem: 'short'\n    });\n    input = options.slotLabelInterval;\n    this.labelInterval = input ? createDuration(input) : this.computeLabelInterval(slotDuration);\n  }; // Computes an automatic value for slotLabelInterval\n\n\n  TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n    var i;\n    var labelInterval;\n    var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n    for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n      labelInterval = createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n      slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n\n      if (slotsPerLabel !== null && slotsPerLabel > 1) {\n        return labelInterval;\n      }\n    }\n\n    return slotDuration; // fall back\n  };\n  /* Rendering\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.render = function (props, context) {\n    this.processOptions(context.options);\n    var cells = props.cells;\n    this.colCnt = cells.length;\n    this.renderSkeleton(context.theme);\n    this.renderSlats(props.dateProfile);\n    this.renderColumns(props.cells, props.dateProfile);\n    this.renderBusinessHours(context, props.businessHourSegs);\n    this.renderDateSelection(props.dateSelectionSegs);\n    this.renderFgEvents(context, props.fgEventSegs);\n    this.renderBgEvents(context, props.bgEventSegs);\n    this.renderEventSelection(props.eventSelection);\n    this.renderEventDrag(props.eventDrag);\n    this.renderEventResize(props.eventResize);\n  };\n\n  TimeGrid.prototype.destroy = function () {\n    _super.prototype.destroy.call(this); // should unrender everything else too\n\n\n    this.renderSlats.unrender();\n    this.renderColumns.unrender();\n    this.renderSkeleton.unrender();\n  };\n\n  TimeGrid.prototype.updateSize = function (isResize) {\n    var _a = this,\n        fillRenderer = _a.fillRenderer,\n        eventRenderer = _a.eventRenderer,\n        mirrorRenderer = _a.mirrorRenderer;\n\n    if (isResize || this.isSlatSizesDirty) {\n      this.buildSlatPositions();\n      this.isSlatSizesDirty = false;\n    }\n\n    if (isResize || this.isColSizesDirty) {\n      this.buildColPositions();\n      this.isColSizesDirty = false;\n    }\n\n    fillRenderer.computeSizes(isResize);\n    eventRenderer.computeSizes(isResize);\n    mirrorRenderer.computeSizes(isResize);\n    fillRenderer.assignSizes(isResize);\n    eventRenderer.assignSizes(isResize);\n    mirrorRenderer.assignSizes(isResize);\n  };\n\n  TimeGrid.prototype._renderSkeleton = function (theme) {\n    var el = this.el;\n    el.innerHTML = '<div class=\"fc-bg\"></div>' + '<div class=\"fc-slats\"></div>' + '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n    this.rootBgContainerEl = el.querySelector('.fc-bg');\n    this.slatContainerEl = el.querySelector('.fc-slats');\n    this.bottomRuleEl = el.querySelector('.fc-divider');\n  };\n\n  TimeGrid.prototype._renderSlats = function (dateProfile) {\n    var theme = this.context.theme;\n    this.slatContainerEl.innerHTML = '<table class=\"' + theme.getClass('tableGrid') + '\">' + this.renderSlatRowHtml(dateProfile) + '</table>';\n    this.slatEls = findElements(this.slatContainerEl, 'tr');\n    this.slatPositions = new PositionCache(this.el, this.slatEls, false, true // vertical\n    );\n    this.isSlatSizesDirty = true;\n  }; // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n\n\n  TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n    var _a = this.context,\n        dateEnv = _a.dateEnv,\n        theme = _a.theme,\n        isRtl = _a.isRtl;\n    var html = '';\n    var dayStart = startOfDay(dateProfile.renderRange.start);\n    var slotTime = dateProfile.minTime;\n    var slotIterator = createDuration(0);\n    var slotDate; // will be on the view's first day, but we only care about its time\n\n    var isLabeled;\n    var axisHtml; // Calculate the time for each slot\n\n    while (asRoughMs(slotTime) < asRoughMs(dateProfile.maxTime)) {\n      slotDate = dateEnv.add(dayStart, slotTime);\n      isLabeled = wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n      axisHtml = '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' + (isLabeled ? '<span>' + // for matchCellWidths\n      htmlEscape(dateEnv.format(slotDate, this.labelFormat)) + '</span>' : '') + '</td>';\n      html += '<tr data-time=\"' + formatIsoTimeString(slotDate) + '\"' + (isLabeled ? '' : ' class=\"fc-minor\"') + '>' + (!isRtl ? axisHtml : '') + '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' + (isRtl ? axisHtml : '') + '</tr>';\n      slotTime = addDurations(slotTime, this.slotDuration);\n      slotIterator = addDurations(slotIterator, this.slotDuration);\n    }\n\n    return html;\n  };\n\n  TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n    var _a = this.context,\n        calendar = _a.calendar,\n        view = _a.view,\n        isRtl = _a.isRtl,\n        theme = _a.theme,\n        dateEnv = _a.dateEnv;\n    var bgRow = new DayBgRow(this.context);\n    this.rootBgContainerEl.innerHTML = '<table class=\"' + theme.getClass('tableGrid') + '\">' + bgRow.renderHtml({\n      cells: cells,\n      dateProfile: dateProfile,\n      renderIntroHtml: this.renderProps.renderBgIntroHtml\n    }) + '</table>';\n    this.colEls = findElements(this.el, '.fc-day, .fc-disabled-day');\n\n    for (var col = 0; col < this.colCnt; col++) {\n      calendar.publiclyTrigger('dayRender', [{\n        date: dateEnv.toDate(cells[col].date),\n        el: this.colEls[col],\n        view: view\n      }]);\n    }\n\n    if (isRtl) {\n      this.colEls.reverse();\n    }\n\n    this.colPositions = new PositionCache(this.el, this.colEls, true, // horizontal\n    false);\n    this.renderContentSkeleton();\n    this.isColSizesDirty = true;\n  };\n\n  TimeGrid.prototype._unrenderColumns = function () {\n    this.unrenderContentSkeleton();\n  };\n  /* Content Skeleton\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Renders the DOM that the view's content will live in\n\n\n  TimeGrid.prototype.renderContentSkeleton = function () {\n    var isRtl = this.context.isRtl;\n    var parts = [];\n    var skeletonEl;\n    parts.push(this.renderProps.renderIntroHtml());\n\n    for (var i = 0; i < this.colCnt; i++) {\n      parts.push('<td>' + '<div class=\"fc-content-col\">' + '<div class=\"fc-event-container fc-mirror-container\"></div>' + '<div class=\"fc-event-container\"></div>' + '<div class=\"fc-highlight-container\"></div>' + '<div class=\"fc-bgevent-container\"></div>' + '<div class=\"fc-business-container\"></div>' + '</div>' + '</td>');\n    }\n\n    if (isRtl) {\n      parts.reverse();\n    }\n\n    skeletonEl = this.contentSkeletonEl = htmlToElement('<div class=\"fc-content-skeleton\">' + '<table>' + '<tr>' + parts.join('') + '</tr>' + '</table>' + '</div>');\n    this.colContainerEls = findElements(skeletonEl, '.fc-content-col');\n    this.mirrorContainerEls = findElements(skeletonEl, '.fc-mirror-container');\n    this.fgContainerEls = findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n    this.bgContainerEls = findElements(skeletonEl, '.fc-bgevent-container');\n    this.highlightContainerEls = findElements(skeletonEl, '.fc-highlight-container');\n    this.businessContainerEls = findElements(skeletonEl, '.fc-business-container');\n\n    if (isRtl) {\n      this.colContainerEls.reverse();\n      this.mirrorContainerEls.reverse();\n      this.fgContainerEls.reverse();\n      this.bgContainerEls.reverse();\n      this.highlightContainerEls.reverse();\n      this.businessContainerEls.reverse();\n    }\n\n    this.el.appendChild(skeletonEl);\n  };\n\n  TimeGrid.prototype.unrenderContentSkeleton = function () {\n    removeElement(this.contentSkeletonEl);\n  }; // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n\n\n  TimeGrid.prototype.groupSegsByCol = function (segs) {\n    var segsByCol = [];\n    var i;\n\n    for (i = 0; i < this.colCnt; i++) {\n      segsByCol.push([]);\n    }\n\n    for (i = 0; i < segs.length; i++) {\n      segsByCol[segs[i].col].push(segs[i]);\n    }\n\n    return segsByCol;\n  }; // Given segments grouped by column, insert the segments' elements into a parallel array of container\n  // elements, each living within a column.\n\n\n  TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n    var col;\n    var segs;\n    var i;\n\n    for (col = 0; col < this.colCnt; col++) {\n      // iterate each column grouping\n      segs = segsByCol[col];\n\n      for (i = 0; i < segs.length; i++) {\n        containerEls[col].appendChild(segs[i].el);\n      }\n    }\n  };\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.getNowIndicatorUnit = function () {\n    return 'minute'; // will refresh on the minute\n  };\n\n  TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n    // HACK: if date columns not ready for some reason (scheduler)\n    if (!this.colContainerEls) {\n      return;\n    }\n\n    var top = this.computeDateTop(date);\n    var nodes = [];\n    var i; // render lines within the columns\n\n    for (i = 0; i < segs.length; i++) {\n      var lineEl = createElement('div', {\n        className: 'fc-now-indicator fc-now-indicator-line'\n      });\n      lineEl.style.top = top + 'px';\n      this.colContainerEls[segs[i].col].appendChild(lineEl);\n      nodes.push(lineEl);\n    } // render an arrow over the axis\n\n\n    if (segs.length > 0) {\n      // is the current time in view?\n      var arrowEl = createElement('div', {\n        className: 'fc-now-indicator fc-now-indicator-arrow'\n      });\n      arrowEl.style.top = top + 'px';\n      this.contentSkeletonEl.appendChild(arrowEl);\n      nodes.push(arrowEl);\n    }\n\n    this.nowIndicatorEls = nodes;\n  };\n\n  TimeGrid.prototype.unrenderNowIndicator = function () {\n    if (this.nowIndicatorEls) {\n      this.nowIndicatorEls.forEach(removeElement);\n      this.nowIndicatorEls = null;\n    }\n  };\n  /* Coordinates\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.getTotalSlatHeight = function () {\n    return this.slatContainerEl.getBoundingClientRect().height;\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n\n\n  TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when);\n    }\n\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n  }; // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n\n\n  TimeGrid.prototype.computeTimeTop = function (duration) {\n    var len = this.slatEls.length;\n    var dateProfile = this.props.dateProfile;\n    var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.minTime)) / asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n\n    var slatIndex;\n    var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because minTime/maxTime might be customized.\n\n    slatCoverage = Math.max(0, slatCoverage);\n    slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n\n    slatIndex = Math.floor(slatCoverage);\n    slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n\n    slatRemainder = slatCoverage - slatIndex;\n    return this.slatPositions.tops[slatIndex] + this.slatPositions.getHeight(slatIndex) * slatRemainder;\n  }; // For each segment in an array, computes and assigns its top and bottom properties\n\n\n  TimeGrid.prototype.computeSegVerticals = function (segs) {\n    var options = this.context.options;\n    var eventMinHeight = options.timeGridEventMinHeight;\n    var i;\n    var seg;\n    var dayDate;\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i];\n      dayDate = this.props.cells[seg.col].date;\n      seg.top = this.computeDateTop(seg.start, dayDate);\n      seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n    }\n  }; // Given segments that already have their top/bottom properties computed, applies those values to\n  // the segments' elements.\n\n\n  TimeGrid.prototype.assignSegVerticals = function (segs) {\n    var i;\n    var seg;\n\n    for (i = 0; i < segs.length; i++) {\n      seg = segs[i];\n      applyStyle(seg.el, this.generateSegVerticalCss(seg));\n    }\n  }; // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n\n\n  TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n    return {\n      top: seg.top,\n      bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n\n    };\n  };\n  /* Sizing\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.buildPositionCaches = function () {\n    this.buildColPositions();\n    this.buildSlatPositions();\n  };\n\n  TimeGrid.prototype.buildColPositions = function () {\n    this.colPositions.build();\n  };\n\n  TimeGrid.prototype.buildSlatPositions = function () {\n    this.slatPositions.build();\n  };\n  /* Hit System\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n    var dateEnv = this.context.dateEnv;\n\n    var _a = this,\n        snapsPerSlot = _a.snapsPerSlot,\n        slatPositions = _a.slatPositions,\n        colPositions = _a.colPositions;\n\n    var colIndex = colPositions.leftToIndex(positionLeft);\n    var slatIndex = slatPositions.topToIndex(positionTop);\n\n    if (colIndex != null && slatIndex != null) {\n      var slatTop = slatPositions.tops[slatIndex];\n      var slatHeight = slatPositions.getHeight(slatIndex);\n      var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n\n      var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n      var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n      var dayDate = this.props.cells[colIndex].date;\n      var time = addDurations(this.props.dateProfile.minTime, multiplyDuration(this.snapDuration, snapIndex));\n      var start = dateEnv.add(dayDate, time);\n      var end = dateEnv.add(start, this.snapDuration);\n      return {\n        col: colIndex,\n        dateSpan: {\n          range: {\n            start: start,\n            end: end\n          },\n          allDay: false\n        },\n        dayEl: this.colEls[colIndex],\n        relativeRect: {\n          left: colPositions.lefts[colIndex],\n          right: colPositions.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight\n        }\n      };\n    }\n  };\n  /* Event Drag Visualization\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype._renderEventDrag = function (state) {\n    if (state) {\n      this.eventRenderer.hideByHash(state.affectedInstances);\n\n      if (state.isEvent) {\n        this.mirrorRenderer.renderSegs(this.context, state.segs, {\n          isDragging: true,\n          sourceSeg: state.sourceSeg\n        });\n      } else {\n        this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n      }\n    }\n  };\n\n  TimeGrid.prototype._unrenderEventDrag = function (state) {\n    if (state) {\n      this.eventRenderer.showByHash(state.affectedInstances);\n\n      if (state.isEvent) {\n        this.mirrorRenderer.unrender(this.context, state.segs, {\n          isDragging: true,\n          sourceSeg: state.sourceSeg\n        });\n      } else {\n        this.fillRenderer.unrender('highlight', this.context);\n      }\n    }\n  };\n  /* Event Resize Visualization\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  TimeGrid.prototype._renderEventResize = function (state) {\n    if (state) {\n      this.eventRenderer.hideByHash(state.affectedInstances);\n      this.mirrorRenderer.renderSegs(this.context, state.segs, {\n        isResizing: true,\n        sourceSeg: state.sourceSeg\n      });\n    }\n  };\n\n  TimeGrid.prototype._unrenderEventResize = function (state) {\n    if (state) {\n      this.eventRenderer.showByHash(state.affectedInstances);\n      this.mirrorRenderer.unrender(this.context, state.segs, {\n        isResizing: true,\n        sourceSeg: state.sourceSeg\n      });\n    }\n  };\n  /* Selection\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n\n\n  TimeGrid.prototype._renderDateSelection = function (segs) {\n    if (segs) {\n      if (this.context.options.selectMirror) {\n        this.mirrorRenderer.renderSegs(this.context, segs, {\n          isSelecting: true\n        });\n      } else {\n        this.fillRenderer.renderSegs('highlight', this.context, segs);\n      }\n    }\n  };\n\n  TimeGrid.prototype._unrenderDateSelection = function (segs) {\n    if (segs) {\n      if (this.context.options.selectMirror) {\n        this.mirrorRenderer.unrender(this.context, segs, {\n          isSelecting: true\n        });\n      } else {\n        this.fillRenderer.unrender('highlight', this.context);\n      }\n    }\n  };\n\n  return TimeGrid;\n}(DateComponent);\n\nvar AllDaySplitter =\n/** @class */\nfunction (_super) {\n  __extends(AllDaySplitter, _super);\n\n  function AllDaySplitter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AllDaySplitter.prototype.getKeyInfo = function () {\n    return {\n      allDay: {},\n      timed: {}\n    };\n  };\n\n  AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n    if (dateSpan.allDay) {\n      return ['allDay'];\n    } else {\n      return ['timed'];\n    }\n  };\n\n  AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n    if (!eventDef.allDay) {\n      return ['timed'];\n    } else if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay'];\n    } else {\n      return ['allDay'];\n    }\n  };\n\n  return AllDaySplitter;\n}(Splitter);\n\nvar TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\nvar WEEK_HEADER_FORMAT = createFormatter({\n  week: 'short'\n});\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\nvar AbstractTimeGridView =\n/** @class */\nfunction (_super) {\n  __extends(AbstractTimeGridView, _super);\n\n  function AbstractTimeGridView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.splitter = new AllDaySplitter();\n    _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n    /* Header Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Generates the HTML that will go before the day-of week header cells\n\n    _this.renderHeadIntroHtml = function () {\n      var _a = _this.context,\n          theme = _a.theme,\n          dateEnv = _a.dateEnv,\n          options = _a.options;\n      var range = _this.props.dateProfile.renderRange;\n      var dayCnt = diffDays(range.start, range.end);\n      var weekText;\n\n      if (options.weekNumbers) {\n        weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n        return '' + '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' + buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n        options, dateEnv, {\n          date: range.start,\n          type: 'week',\n          forceOff: dayCnt > 1\n        }, htmlEscape(weekText) // inner HTML\n        ) + '</th>';\n      } else {\n        return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n      }\n    };\n    /* Time Grid Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n\n\n    _this.renderTimeGridBgIntroHtml = function () {\n      var theme = _this.context.theme;\n      return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n    }; // Generates the HTML that goes before all other types of cells.\n    // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\n\n    _this.renderTimeGridIntroHtml = function () {\n      return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n    };\n    /* Day Grid Render Methods\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Generates the HTML that goes before the all-day cells\n\n\n    _this.renderDayGridBgIntroHtml = function () {\n      var _a = _this.context,\n          theme = _a.theme,\n          options = _a.options;\n      return '' + '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' + '<span>' + // needed for matchCellWidths\n      getAllDayHtml(options) + '</span>' + '</td>';\n    }; // Generates the HTML that goes before all other types of cells.\n    // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n\n\n    _this.renderDayGridIntroHtml = function () {\n      return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n    };\n\n    return _this;\n  }\n\n  AbstractTimeGridView.prototype.render = function (props, context) {\n    _super.prototype.render.call(this, props, context);\n\n    this.renderSkeleton(context);\n  };\n\n  AbstractTimeGridView.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.renderSkeleton.unrender();\n  };\n\n  AbstractTimeGridView.prototype._renderSkeleton = function (context) {\n    this.el.classList.add('fc-timeGrid-view');\n    this.el.innerHTML = this.renderSkeletonHtml();\n    this.scroller = new ScrollComponent('hidden', // overflow x\n    'auto' // overflow y\n    );\n    var timeGridWrapEl = this.scroller.el;\n    this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n    timeGridWrapEl.classList.add('fc-time-grid-container');\n    var timeGridEl = createElement('div', {\n      className: 'fc-time-grid'\n    });\n    timeGridWrapEl.appendChild(timeGridEl);\n    this.timeGrid = new TimeGrid(timeGridEl, {\n      renderBgIntroHtml: this.renderTimeGridBgIntroHtml,\n      renderIntroHtml: this.renderTimeGridIntroHtml\n    });\n\n    if (context.options.allDaySlot) {\n      // should we display the \"all-day\" area?\n      this.dayGrid = new DayGrid( // the all-day subcomponent of this view\n      this.el.querySelector('.fc-day-grid'), {\n        renderNumberIntroHtml: this.renderDayGridIntroHtml,\n        renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n        renderIntroHtml: this.renderDayGridIntroHtml,\n        colWeekNumbersVisible: false,\n        cellWeekNumbersVisible: false\n      }); // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n\n      var dividerEl = this.el.querySelector('.fc-divider');\n      this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;\n    }\n  };\n\n  AbstractTimeGridView.prototype._unrenderSkeleton = function () {\n    this.el.classList.remove('fc-timeGrid-view');\n    this.timeGrid.destroy();\n\n    if (this.dayGrid) {\n      this.dayGrid.destroy();\n    }\n\n    this.scroller.destroy();\n  };\n  /* Rendering\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Builds the HTML skeleton for the view.\n  // The day-grid and time-grid components will render inside containers defined by this HTML.\n\n\n  AbstractTimeGridView.prototype.renderSkeletonHtml = function () {\n    var _a = this.context,\n        theme = _a.theme,\n        options = _a.options;\n    return '' + '<table class=\"' + theme.getClass('tableGrid') + '\">' + (options.columnHeader ? '<thead class=\"fc-head\">' + '<tr>' + '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' + '</tr>' + '</thead>' : '') + '<tbody class=\"fc-body\">' + '<tr>' + '<td class=\"' + theme.getClass('widgetContent') + '\">' + (options.allDaySlot ? '<div class=\"fc-day-grid\"></div>' + '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' : '') + '</td>' + '</tr>' + '</tbody>' + '</table>';\n  };\n  /* Now Indicator\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  AbstractTimeGridView.prototype.getNowIndicatorUnit = function () {\n    return this.timeGrid.getNowIndicatorUnit();\n  }; // subclasses should implement\n  // renderNowIndicator(date: DateMarker) {\n  // }\n\n\n  AbstractTimeGridView.prototype.unrenderNowIndicator = function () {\n    this.timeGrid.unrenderNowIndicator();\n  };\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n\n  AbstractTimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n    _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n\n\n    this.timeGrid.updateSize(isResize);\n\n    if (this.dayGrid) {\n      this.dayGrid.updateSize(isResize);\n    }\n  }; // Adjusts the vertical dimensions of the view to the specified values\n\n\n  AbstractTimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n    var _this = this;\n\n    var eventLimit;\n    var scrollerHeight;\n    var scrollbarWidths; // make all axis cells line up\n\n    this.axisWidth = matchCellWidths(findElements(this.el, '.fc-axis')); // hack to give the view some height prior to timeGrid's columns being rendered\n    // TODO: separate setting height from scroller VS timeGrid.\n\n    if (!this.timeGrid.colEls) {\n      if (!isAuto) {\n        scrollerHeight = this.computeScrollerHeight(viewHeight);\n        this.scroller.setHeight(scrollerHeight);\n      }\n\n      return;\n    } // set of fake row elements that must compensate when scroller has scrollbars\n\n\n    var noScrollRowEls = findElements(this.el, '.fc-row').filter(function (node) {\n      return !_this.scroller.el.contains(node);\n    }); // reset all dimensions back to the original state\n\n    this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n\n    this.scroller.clear(); // sets height to 'auto' and clears overflow\n\n    noScrollRowEls.forEach(uncompensateScroll); // limit number of events in the all-day area\n\n    if (this.dayGrid) {\n      this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n      eventLimit = this.context.options.eventLimit;\n\n      if (eventLimit && typeof eventLimit !== 'number') {\n        eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n      }\n\n      if (eventLimit) {\n        this.dayGrid.limitRows(eventLimit);\n      }\n    }\n\n    if (!isAuto) {\n      // should we force dimensions of the scroll container?\n      scrollerHeight = this.computeScrollerHeight(viewHeight);\n      this.scroller.setHeight(scrollerHeight);\n      scrollbarWidths = this.scroller.getScrollbarWidths();\n\n      if (scrollbarWidths.left || scrollbarWidths.right) {\n        // using scrollbars?\n        // make the all-day and header rows lines up\n        noScrollRowEls.forEach(function (rowEl) {\n          compensateScroll(rowEl, scrollbarWidths);\n        }); // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n        // and reapply the desired height to the scroller.\n\n        scrollerHeight = this.computeScrollerHeight(viewHeight);\n        this.scroller.setHeight(scrollerHeight);\n      } // guarantees the same scrollbar widths\n\n\n      this.scroller.lockOverflow(scrollbarWidths); // if there's any space below the slats, show the horizontal rule.\n      // this won't cause any new overflow, because lockOverflow already called.\n\n      if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n        this.timeGrid.bottomRuleEl.style.display = '';\n      }\n    }\n  }; // given a desired total height of the view, returns what the height of the scroller should be\n\n\n  AbstractTimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n    return viewHeight - subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n  };\n  /* Scroll\n  ------------------------------------------------------------------------------------------------------------------*/\n  // Computes the initial pre-configured scroll state prior to allowing the user to change it\n\n\n  AbstractTimeGridView.prototype.computeDateScroll = function (duration) {\n    var top = this.timeGrid.computeTimeTop(duration); // zoom can give weird floating-point values. rather scroll a little bit further\n\n    top = Math.ceil(top);\n\n    if (top) {\n      top++; // to overcome top border that slots beyond the first have. looks better\n    }\n\n    return {\n      top: top\n    };\n  };\n\n  AbstractTimeGridView.prototype.queryDateScroll = function () {\n    return {\n      top: this.scroller.getScrollTop()\n    };\n  };\n\n  AbstractTimeGridView.prototype.applyDateScroll = function (scroll) {\n    if (scroll.top !== undefined) {\n      this.scroller.setScrollTop(scroll.top);\n    }\n  }; // Generates an HTML attribute string for setting the width of the axis, if it is known\n\n\n  AbstractTimeGridView.prototype.axisStyleAttr = function () {\n    if (this.axisWidth != null) {\n      return 'style=\"width:' + this.axisWidth + 'px\"';\n    }\n\n    return '';\n  };\n\n  return AbstractTimeGridView;\n}(View);\n\nAbstractTimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\nvar SimpleTimeGrid =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTimeGrid, _super);\n\n  function SimpleTimeGrid(timeGrid) {\n    var _this = _super.call(this, timeGrid.el) || this;\n\n    _this.buildDayRanges = memoize(buildDayRanges);\n    _this.slicer = new TimeGridSlicer();\n    _this.timeGrid = timeGrid;\n    return _this;\n  }\n\n  SimpleTimeGrid.prototype.firstContext = function (context) {\n    context.calendar.registerInteractiveComponent(this, {\n      el: this.timeGrid.el\n    });\n  };\n\n  SimpleTimeGrid.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.context.calendar.unregisterInteractiveComponent(this);\n  };\n\n  SimpleTimeGrid.prototype.render = function (props, context) {\n    var dateEnv = this.context.dateEnv;\n    var dateProfile = props.dateProfile,\n        dayTable = props.dayTable;\n    var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, dateEnv);\n    this.timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, context.calendar, this.timeGrid, dayRanges), {\n      dateProfile: dateProfile,\n      cells: dayTable.cells[0]\n    }), context);\n  };\n\n  SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n    this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n  };\n\n  SimpleTimeGrid.prototype.buildPositionCaches = function () {\n    this.timeGrid.buildPositionCaches();\n  };\n\n  SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n    var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n\n    if (rawHit) {\n      return {\n        component: this.timeGrid,\n        dateSpan: rawHit.dateSpan,\n        dayEl: rawHit.dayEl,\n        rect: {\n          left: rawHit.relativeRect.left,\n          right: rawHit.relativeRect.right,\n          top: rawHit.relativeRect.top,\n          bottom: rawHit.relativeRect.bottom\n        },\n        layer: 0\n      };\n    }\n  };\n\n  return SimpleTimeGrid;\n}(DateComponent);\n\nfunction buildDayRanges(dayTable, dateProfile, dateEnv) {\n  var ranges = [];\n\n  for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n    var date = _a[_i];\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.minTime),\n      end: dateEnv.add(date, dateProfile.maxTime)\n    });\n  }\n\n  return ranges;\n}\n\nvar TimeGridSlicer =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridSlicer, _super);\n\n  function TimeGridSlicer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n    var segs = [];\n\n    for (var col = 0; col < dayRanges.length; col++) {\n      var segRange = intersectRanges(range, dayRanges[col]);\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col: col\n        });\n      }\n    }\n\n    return segs;\n  };\n\n  return TimeGridSlicer;\n}(Slicer);\n\nvar TimeGridView =\n/** @class */\nfunction (_super) {\n  __extends(TimeGridView, _super);\n\n  function TimeGridView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.buildDayTable = memoize(buildDayTable);\n    return _this;\n  }\n\n  TimeGridView.prototype.render = function (props, context) {\n    _super.prototype.render.call(this, props, context); // for flags for updateSize. also _renderSkeleton/_unrenderSkeleton\n\n\n    var _a = this.props,\n        dateProfile = _a.dateProfile,\n        dateProfileGenerator = _a.dateProfileGenerator;\n    var nextDayThreshold = context.nextDayThreshold;\n    var dayTable = this.buildDayTable(dateProfile, dateProfileGenerator);\n    var splitProps = this.splitter.splitProps(props);\n\n    if (this.header) {\n      this.header.receiveProps({\n        dateProfile: dateProfile,\n        dates: dayTable.headerDates,\n        datesRepDistinctDays: true,\n        renderIntroHtml: this.renderHeadIntroHtml\n      }, context);\n    }\n\n    this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], {\n      dateProfile: dateProfile,\n      dayTable: dayTable\n    }), context);\n\n    if (this.simpleDayGrid) {\n      this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], {\n        dateProfile: dateProfile,\n        dayTable: dayTable,\n        nextDayThreshold: nextDayThreshold,\n        isRigid: false\n      }), context);\n    }\n\n    this.startNowIndicator(dateProfile, dateProfileGenerator);\n  };\n\n  TimeGridView.prototype._renderSkeleton = function (context) {\n    _super.prototype._renderSkeleton.call(this, context);\n\n    if (context.options.columnHeader) {\n      this.header = new DayHeader(this.el.querySelector('.fc-head-container'));\n    }\n\n    this.simpleTimeGrid = new SimpleTimeGrid(this.timeGrid);\n\n    if (this.dayGrid) {\n      this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);\n    }\n  };\n\n  TimeGridView.prototype._unrenderSkeleton = function () {\n    _super.prototype._unrenderSkeleton.call(this);\n\n    if (this.header) {\n      this.header.destroy();\n    }\n\n    this.simpleTimeGrid.destroy();\n\n    if (this.simpleDayGrid) {\n      this.simpleDayGrid.destroy();\n    }\n  };\n\n  TimeGridView.prototype.renderNowIndicator = function (date) {\n    this.simpleTimeGrid.renderNowIndicator(date);\n  };\n\n  return TimeGridView;\n}(AbstractTimeGridView);\n\nfunction buildDayTable(dateProfile, dateProfileGenerator) {\n  var daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator);\n  return new DayTable(daySeries, false);\n}\n\nvar main = createPlugin({\n  defaultView: 'timeGridWeek',\n  views: {\n    timeGrid: {\n      class: TimeGridView,\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true // a bad name. confused with overlap/constraint system\n\n    },\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: {\n        days: 1\n      }\n    },\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: {\n        weeks: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { AbstractTimeGridView, TimeGrid, TimeGridSlicer, TimeGridView, buildDayRanges, buildDayTable };","map":{"version":3,"sources":["/home/natalia/Desktop/fe-PetCare-App/fe-PetCare-App/my-app/node_modules/@fullcalendar/timegrid/main.esm.js"],"names":["createFormatter","removeElement","computeEventDraggable","computeEventStartResizable","computeEventEndResizable","cssToStr","isMultiDayRange","htmlEscape","compareByFieldSpecs","applyStyle","FgEventRenderer","buildSegCompareObj","FillRenderer","memoize","memoizeRendering","createDuration","wholeDivideDurations","findElements","PositionCache","startOfDay","asRoughMs","formatIsoTimeString","addDurations","htmlToElement","createElement","multiplyDuration","DateComponent","hasBgRendering","Splitter","diffDays","buildGotoAnchorHtml","getAllDayHtml","ScrollComponent","matchCellWidths","uncompensateScroll","compensateScroll","subtractInnerElHeight","View","intersectRanges","Slicer","DayHeader","DaySeries","DayTable","createPlugin","DayBgRow","DayGrid","SimpleDayGrid","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","TimeGridEventRenderer","_super","timeGrid","_this","renderSegs","context","segs","mirrorInfo","fullTimeFormat","hour","minute","separator","options","defaultRangeSeparator","attachSegs","segsByCol","groupSegsByCol","col","sortEventSegs","attachSegsByCol","fgContainerEls","detachSegs","forEach","seg","el","computeSegSizes","allSegs","_a","colCnt","computeSegVerticals","computeSegHorizontals","assignSegSizes","assignSegVerticals","assignSegCss","computeEventTimeFormat","meridiem","computeDisplayEventEnd","renderSegHtml","eventRange","eventDef","def","eventUi","ui","allDay","isDraggable","isResizableFromStart","isStart","isResizableFromEnd","isEnd","classes","getSegClasses","skinCss","getSkinCss","timeText","fullTimeText","startTimeText","unshift","range","unzonedStart","start","unzonedEnd","end","_getTimeText","getTimeText","join","url","title","levels","level0","buildSlotSegLevels","computeForwardSlotSegs","computeSlotSegPressures","computeSegForwardBack","seriesBackwardPressure","seriesBackwardCoord","forwardSegs","forwardCoord","undefined","sortForwardSegs","backwardCoord","objs","map","buildTimeGridSegCompareObj","specs","field","order","concat","eventOrderSpecs","sort","obj0","obj1","c","_seg","_i","segs_1","generateSegCss","level","classList","add","bottom","top","shouldOverlap","slotEventOverlap","props","generateSegVerticalCss","isRtl","left","right","Math","min","zIndex","forwardPressure","j","computeSlotSegCollisions","push","k","forwardSeg","max","otherSegs","results","isSlotSegCollision","seg1","seg2","obj","TimeGridMirrorRenderer","mirrorContainerEls","sourceSeg","sourceSegProps","marginLeft","marginRight","TimeGridFillRenderer","type","containerEls","bgContainerEls","businessContainerEls","highlightContainerEls","AGENDA_STOCK_SUB_DURATIONS","hours","minutes","seconds","TimeGrid","renderProps","isSlatSizesDirty","isColSizesDirty","processOptions","_processOptions","renderSkeleton","_renderSkeleton","renderSlats","_renderSlats","renderColumns","_renderColumns","_unrenderColumns","eventRenderer","fillRenderer","mirrorRenderer","renderBusinessHours","bind","unrender","renderDateSelection","_renderDateSelection","_unrenderDateSelection","renderFgEvents","renderBgEvents","renderEventSelection","selectByInstanceId","unselectByInstanceId","renderEventDrag","_renderEventDrag","_unrenderEventDrag","renderEventResize","_renderEventResize","_unrenderEventResize","slotDuration","snapDuration","snapsPerSlot","input","slotLabelFormat","isArray","labelFormat","omitZeroMinute","slotLabelInterval","labelInterval","computeLabelInterval","slotsPerLabel","render","cells","theme","dateProfile","businessHourSegs","dateSelectionSegs","fgEventSegs","bgEventSegs","eventSelection","eventDrag","eventResize","destroy","updateSize","isResize","buildSlatPositions","buildColPositions","computeSizes","assignSizes","innerHTML","getClass","rootBgContainerEl","querySelector","slatContainerEl","bottomRuleEl","renderSlatRowHtml","slatEls","slatPositions","dateEnv","html","dayStart","renderRange","slotTime","minTime","slotIterator","slotDate","isLabeled","axisHtml","maxTime","format","calendar","view","bgRow","renderHtml","renderIntroHtml","renderBgIntroHtml","colEls","publiclyTrigger","date","toDate","reverse","colPositions","renderContentSkeleton","unrenderContentSkeleton","parts","skeletonEl","contentSkeletonEl","colContainerEls","appendChild","getNowIndicatorUnit","renderNowIndicator","computeDateTop","nodes","lineEl","className","style","arrowEl","nowIndicatorEls","unrenderNowIndicator","getTotalSlatHeight","getBoundingClientRect","height","when","startOfDayDate","computeTimeTop","valueOf","duration","len","slatCoverage","milliseconds","slatIndex","slatRemainder","floor","tops","getHeight","eventMinHeight","timeGridEventMinHeight","dayDate","buildPositionCaches","build","positionToHit","positionLeft","positionTop","colIndex","leftToIndex","topToIndex","slatTop","slatHeight","partial","localSnapIndex","snapIndex","time","dateSpan","dayEl","relativeRect","lefts","rights","state","hideByHash","affectedInstances","isEvent","isDragging","showByHash","isResizing","selectMirror","isSelecting","AllDaySplitter","getKeyInfo","timed","getKeysForDateSpan","getKeysForEventDef","TIMEGRID_ALL_DAY_EVENT_LIMIT","WEEK_HEADER_FORMAT","week","AbstractTimeGridView","splitter","_unrenderSkeleton","renderHeadIntroHtml","dayCnt","weekText","weekNumbers","axisStyleAttr","forceOff","renderTimeGridBgIntroHtml","renderTimeGridIntroHtml","renderDayGridBgIntroHtml","renderDayGridIntroHtml","renderSkeletonHtml","scroller","timeGridWrapEl","timeGridEl","allDaySlot","dayGrid","renderNumberIntroHtml","colWeekNumbersVisible","cellWeekNumbersVisible","dividerEl","bottomCoordPadding","remove","columnHeader","viewHeight","isAuto","updateBaseSize","eventLimit","scrollerHeight","scrollbarWidths","axisWidth","computeScrollerHeight","setHeight","noScrollRowEls","filter","node","contains","display","clear","removeSegPopover","limitRows","getScrollbarWidths","rowEl","lockOverflow","computeDateScroll","ceil","queryDateScroll","getScrollTop","applyDateScroll","scroll","setScrollTop","usesMinMaxTime","SimpleTimeGrid","buildDayRanges","slicer","TimeGridSlicer","firstContext","registerInteractiveComponent","unregisterInteractiveComponent","dayTable","dayRanges","receiveProps","sliceProps","sliceNowDate","queryHit","rawHit","component","rect","layer","ranges","headerDates","sliceRange","segRange","TimeGridView","buildDayTable","dateProfileGenerator","nextDayThreshold","splitProps","header","dates","datesRepDistinctDays","simpleTimeGrid","simpleDayGrid","isRigid","startNowIndicator","daySeries","main","defaultView","views","class","timeGridDay","days","timeGridWeek","weeks"],"mappings":"AAAA;;;;;AAMA,SAASA,eAAT,EAA0BC,aAA1B,EAAyCC,qBAAzC,EAAgEC,0BAAhE,EAA4FC,wBAA5F,EAAsHC,QAAtH,EAAgIC,eAAhI,EAAiJC,UAAjJ,EAA6JC,mBAA7J,EAAkLC,UAAlL,EAA8LC,eAA9L,EAA+MC,kBAA/M,EAAmOC,YAAnO,EAAiPC,OAAjP,EAA0PC,gBAA1P,EAA4QC,cAA5Q,EAA4RC,oBAA5R,EAAkTC,YAAlT,EAAgUC,aAAhU,EAA+UC,UAA/U,EAA2VC,SAA3V,EAAsWC,mBAAtW,EAA2XC,YAA3X,EAAyYC,aAAzY,EAAwZC,aAAxZ,EAAuaC,gBAAva,EAAybC,aAAzb,EAAwcC,cAAxc,EAAwdC,QAAxd,EAAkeC,QAAle,EAA4eC,mBAA5e,EAAigBC,aAAjgB,EAAghBC,eAAhhB,EAAiiBC,eAAjiB,EAAkjBC,kBAAljB,EAAskBC,gBAAtkB,EAAwlBC,qBAAxlB,EAA+mBC,IAA/mB,EAAqnBC,eAArnB,EAAsoBC,MAAtoB,EAA8oBC,SAA9oB,EAAypBC,SAAzpB,EAAoqBC,QAApqB,EAA8qBC,YAA9qB,QAAksB,oBAAlsB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,aAA5B,QAAiD,uBAAjD;AAEA;;;;;;;;;;;;;;;AAcA;;AAEA,IAAIC,aAAa,GAAG,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/BF,EAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,IAAAA,SAAS,EAAE;AAAb,eAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,IAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,GAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,SAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,GAF9E;;AAGA,SAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,CALD;;AAOA,SAASO,SAAT,CAAmBR,CAAnB,EAAsBC,CAAtB,EAAyB;AACrBF,EAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,WAASQ,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBV,CAAnB;AAAuB;;AACvCA,EAAAA,CAAC,CAACW,SAAF,GAAcV,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACU,MAAP,CAAcX,CAAd,CAAb,IAAiCQ,EAAE,CAACE,SAAH,GAAeV,CAAC,CAACU,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH;;AAED,IAAII,QAAQ,GAAG,YAAW;AACtBA,EAAAA,QAAQ,GAAGX,MAAM,CAACY,MAAP,IAAiB,SAASD,QAAT,CAAkBE,CAAlB,EAAqB;AAC7C,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAIX,CAAT,IAAcU,CAAd,EAAiB,IAAId,MAAM,CAACS,SAAP,CAAiBJ,cAAjB,CAAgCc,IAAhC,CAAqCL,CAArC,EAAwCV,CAAxC,CAAJ,EAAgDS,CAAC,CAACT,CAAD,CAAD,GAAOU,CAAC,CAACV,CAAD,CAAR;AACpE;;AACD,WAAOS,CAAP;AACH,GAND;;AAOA,SAAOF,QAAQ,CAACS,KAAT,CAAe,IAAf,EAAqBH,SAArB,CAAP;AACH,CATD;AAWA;;;;;;AAIA,IAAII,qBAAqB;AAAG;AAAe,UAAUC,MAAV,EAAkB;AACzDhB,EAAAA,SAAS,CAACe,qBAAD,EAAwBC,MAAxB,CAAT;;AACA,WAASD,qBAAT,CAA+BE,QAA/B,EAAyC;AACrC,QAAIC,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;AACAK,IAAAA,KAAK,CAACD,QAAN,GAAiBA,QAAjB;AACA,WAAOC,KAAP;AACH;;AACDH,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgCgB,UAAhC,GAA6C,UAAUC,OAAV,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqC;AAC9EN,IAAAA,MAAM,CAACb,SAAP,CAAiBgB,UAAjB,CAA4BN,IAA5B,CAAiC,IAAjC,EAAuCO,OAAvC,EAAgDC,IAAhD,EAAsDC,UAAtD,EAD8E,CAE9E;;;AACA,SAAKC,cAAL,GAAsB/E,eAAe,CAAC;AAClCgF,MAAAA,IAAI,EAAE,SAD4B;AAElCC,MAAAA,MAAM,EAAE,SAF0B;AAGlCC,MAAAA,SAAS,EAAE,KAAKN,OAAL,CAAaO,OAAb,CAAqBC;AAHE,KAAD,CAArC;AAKH,GARD,CAPyD,CAgBzD;AACA;;;AACAb,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC0B,UAAhC,GAA6C,UAAUR,IAAV,EAAgBC,UAAhB,EAA4B;AACrE,QAAIQ,SAAS,GAAG,KAAKb,QAAL,CAAcc,cAAd,CAA6BV,IAA7B,CAAhB,CADqE,CAErE;AACA;;AACA,SAAK,IAAIW,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,SAAS,CAAClB,MAAlC,EAA0CoB,GAAG,EAA7C,EAAiD;AAC7CF,MAAAA,SAAS,CAACE,GAAD,CAAT,GAAiB,KAAKC,aAAL,CAAmBH,SAAS,CAACE,GAAD,CAA5B,CAAjB;AACH;;AACD,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKb,QAAL,CAAciB,eAAd,CAA8BJ,SAA9B,EAAyC,KAAKb,QAAL,CAAckB,cAAvD;AACH,GATD;;AAUApB,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgCiC,UAAhC,GAA6C,UAAUf,IAAV,EAAgB;AACzDA,IAAAA,IAAI,CAACgB,OAAL,CAAa,UAAUC,GAAV,EAAe;AACxB7F,MAAAA,aAAa,CAAC6F,GAAG,CAACC,EAAL,CAAb;AACH,KAFD;AAGA,SAAKT,SAAL,GAAiB,IAAjB;AACH,GALD;;AAMAf,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgCqC,eAAhC,GAAkD,UAAUC,OAAV,EAAmB;AACjE,QAAIC,EAAE,GAAG,IAAT;AAAA,QAAezB,QAAQ,GAAGyB,EAAE,CAACzB,QAA7B;AAAA,QAAuCa,SAAS,GAAGY,EAAE,CAACZ,SAAtD;;AACA,QAAIa,MAAM,GAAG1B,QAAQ,CAAC0B,MAAtB;AACA1B,IAAAA,QAAQ,CAAC2B,mBAAT,CAA6BH,OAA7B,EAHiE,CAG1B;;AACvC,QAAIX,SAAJ,EAAe;AACX,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGW,MAAxB,EAAgCX,GAAG,EAAnC,EAAuC;AACnC,aAAKa,qBAAL,CAA2Bf,SAAS,CAACE,GAAD,CAApC,EADmC,CACS;AAC/C;AACJ;AACJ,GATD;;AAUAjB,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC2C,cAAhC,GAAiD,UAAUL,OAAV,EAAmB;AAChE,QAAIC,EAAE,GAAG,IAAT;AAAA,QAAezB,QAAQ,GAAGyB,EAAE,CAACzB,QAA7B;AAAA,QAAuCa,SAAS,GAAGY,EAAE,CAACZ,SAAtD;;AACA,QAAIa,MAAM,GAAG1B,QAAQ,CAAC0B,MAAtB;AACA1B,IAAAA,QAAQ,CAAC8B,kBAAT,CAA4BN,OAA5B,EAHgE,CAG1B;;AACtC,QAAIX,SAAJ,EAAe;AACX,WAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGW,MAAxB,EAAgCX,GAAG,EAAnC,EAAuC;AACnC,aAAKgB,YAAL,CAAkBlB,SAAS,CAACE,GAAD,CAA3B;AACH;AACJ;AACJ,GATD,CA5CyD,CAsDzD;;;AACAjB,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC8C,sBAAhC,GAAyD,YAAY;AACjE,WAAO;AACHzB,MAAAA,IAAI,EAAE,SADH;AAEHC,MAAAA,MAAM,EAAE,SAFL;AAGHyB,MAAAA,QAAQ,EAAE;AAHP,KAAP;AAKH,GAND,CAvDyD,CA8DzD;;;AACAnC,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgCgD,sBAAhC,GAAyD,YAAY;AACjE,WAAO,IAAP;AACH,GAFD,CA/DyD,CAkEzD;;;AACApC,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgCiD,aAAhC,GAAgD,UAAUd,GAAV,EAAehB,UAAf,EAA2B;AACvE,QAAI+B,UAAU,GAAGf,GAAG,CAACe,UAArB;AACA,QAAIC,QAAQ,GAAGD,UAAU,CAACE,GAA1B;AACA,QAAIC,OAAO,GAAGH,UAAU,CAACI,EAAzB;AACA,QAAIC,MAAM,GAAGJ,QAAQ,CAACI,MAAtB;AACA,QAAIC,WAAW,GAAGjH,qBAAqB,CAAC,KAAK0E,OAAN,EAAekC,QAAf,EAAyBE,OAAzB,CAAvC;AACA,QAAII,oBAAoB,GAAGtB,GAAG,CAACuB,OAAJ,IAAelH,0BAA0B,CAAC,KAAKyE,OAAN,EAAekC,QAAf,EAAyBE,OAAzB,CAApE;AACA,QAAIM,kBAAkB,GAAGxB,GAAG,CAACyB,KAAJ,IAAanH,wBAAwB,CAAC,KAAKwE,OAAN,EAAekC,QAAf,EAAyBE,OAAzB,CAA9D;AACA,QAAIQ,OAAO,GAAG,KAAKC,aAAL,CAAmB3B,GAAnB,EAAwBqB,WAAxB,EAAqCC,oBAAoB,IAAIE,kBAA7D,EAAiFxC,UAAjF,CAAd;AACA,QAAI4C,OAAO,GAAGrH,QAAQ,CAAC,KAAKsH,UAAL,CAAgBX,OAAhB,CAAD,CAAtB;AACA,QAAIY,QAAJ;AACA,QAAIC,YAAJ,CAXuE,CAWrD;;AAClB,QAAIC,aAAJ,CAZuE,CAYpD;;AACnBN,IAAAA,OAAO,CAACO,OAAR,CAAgB,oBAAhB,EAbuE,CAcvE;;AACA,QAAIzH,eAAe,CAACuG,UAAU,CAACmB,KAAZ,CAAnB,EAAuC;AACnC;AACA;AACA;AACA,UAAIlC,GAAG,CAACuB,OAAJ,IAAevB,GAAG,CAACyB,KAAvB,EAA8B;AAC1B,YAAIU,YAAY,GAAGnC,GAAG,CAACoC,KAAvB;AACA,YAAIC,UAAU,GAAGrC,GAAG,CAACsC,GAArB;AACAR,QAAAA,QAAQ,GAAG,KAAKS,YAAL,CAAkBJ,YAAlB,EAAgCE,UAAhC,EAA4CjB,MAA5C,CAAX,CAH0B,CAGsC;;AAChEW,QAAAA,YAAY,GAAG,KAAKQ,YAAL,CAAkBJ,YAAlB,EAAgCE,UAAhC,EAA4CjB,MAA5C,EAAoD,KAAKnC,cAAzD,CAAf;AACA+C,QAAAA,aAAa,GAAG,KAAKO,YAAL,CAAkBJ,YAAlB,EAAgCE,UAAhC,EAA4CjB,MAA5C,EAAoD,IAApD,EAA0D,KAA1D,CAAhB,CAL0B,CAKwD;AACrF;AACJ,KAXD,MAYK;AACD;AACAU,MAAAA,QAAQ,GAAG,KAAKU,WAAL,CAAiBzB,UAAjB,CAAX;AACAgB,MAAAA,YAAY,GAAG,KAAKS,WAAL,CAAiBzB,UAAjB,EAA6B,KAAK9B,cAAlC,CAAf;AACA+C,MAAAA,aAAa,GAAG,KAAKQ,WAAL,CAAiBzB,UAAjB,EAA6B,IAA7B,EAAmC,KAAnC,CAAhB,CAJC,CAI0D;AAC9D;;AACD,WAAO,eAAeW,OAAO,CAACe,IAAR,CAAa,GAAb,CAAf,GAAmC,GAAnC,IACFzB,QAAQ,CAAC0B,GAAT,GACG,YAAYjI,UAAU,CAACuG,QAAQ,CAAC0B,GAAV,CAAtB,GAAuC,GAD1C,GAEG,EAHD,KAIFd,OAAO,GACJ,aAAaA,OAAb,GAAuB,GADnB,GAEJ,EAND,IAOH,GAPG,GAQH,0BARG,IASFE,QAAQ,GACL,yBACI,eADJ,GACsBrH,UAAU,CAACuH,aAAD,CADhC,GACkD,GADlD,GAEI,cAFJ,GAEqBvH,UAAU,CAACsH,YAAD,CAF/B,GAEgD,GAFhD,GAGI,GAHJ,GAII,QAJJ,GAIetH,UAAU,CAACqH,QAAD,CAJzB,GAIsC,SAJtC,GAKI,QANC,GAOL,EAhBD,KAiBFd,QAAQ,CAAC2B,KAAT,GACG,2BACIlI,UAAU,CAACuG,QAAQ,CAAC2B,KAAV,CADd,GAEI,QAHP,GAIG,EArBD,IAsBH,QAtBG;AAuBH;;;;;;AAMCnB,IAAAA,kBAAkB,GACf,+CADe,GAEf,EA/BD,IAgCH,MAhCJ;AAiCH,GAlED,CAnEyD,CAsIzD;AACA;AACA;;;AACA/C,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC0C,qBAAhC,GAAwD,UAAUxB,IAAV,EAAgB;AACpE,QAAI6D,MAAJ;AACA,QAAIC,MAAJ;AACA,QAAI1E,CAAJ;AACAyE,IAAAA,MAAM,GAAGE,kBAAkB,CAAC/D,IAAD,CAA3B;AACAgE,IAAAA,sBAAsB,CAACH,MAAD,CAAtB;;AACA,QAAKC,MAAM,GAAGD,MAAM,CAAC,CAAD,CAApB,EAA0B;AACtB,WAAKzE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0E,MAAM,CAACvE,MAAvB,EAA+BH,CAAC,EAAhC,EAAoC;AAChC6E,QAAAA,uBAAuB,CAACH,MAAM,CAAC1E,CAAD,CAAP,CAAvB;AACH;;AACD,WAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG0E,MAAM,CAACvE,MAAvB,EAA+BH,CAAC,EAAhC,EAAoC;AAChC,aAAK8E,qBAAL,CAA2BJ,MAAM,CAAC1E,CAAD,CAAjC,EAAsC,CAAtC,EAAyC,CAAzC;AACH;AACJ;AACJ,GAdD,CAzIyD,CAwJzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAM,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgCoF,qBAAhC,GAAwD,UAAUjD,GAAV,EAAekD,sBAAf,EAAuCC,mBAAvC,EAA4D;AAChH,QAAIC,WAAW,GAAGpD,GAAG,CAACoD,WAAtB;AACA,QAAIjF,CAAJ;;AACA,QAAI6B,GAAG,CAACqD,YAAJ,KAAqBC,SAAzB,EAAoC;AAAE;AAClC,UAAI,CAACF,WAAW,CAAC9E,MAAjB,EAAyB;AACrB;AACA0B,QAAAA,GAAG,CAACqD,YAAJ,GAAmB,CAAnB;AACH,OAHD,MAIK;AACD;AACA,aAAKE,eAAL,CAAqBH,WAArB,EAFC,CAGD;AACA;;AACA,aAAKH,qBAAL,CAA2BG,WAAW,CAAC,CAAD,CAAtC,EAA2CF,sBAAsB,GAAG,CAApE,EAAuEC,mBAAvE;AACAnD,QAAAA,GAAG,CAACqD,YAAJ,GAAmBD,WAAW,CAAC,CAAD,CAAX,CAAeI,aAAlC;AACH,OAZ+B,CAahC;;;AACAxD,MAAAA,GAAG,CAACwD,aAAJ,GAAoBxD,GAAG,CAACqD,YAAJ,GAChB,CAACrD,GAAG,CAACqD,YAAJ,GAAmBF,mBAApB,MAA2C;AACtCD,MAAAA,sBAAsB,GAAG,CAD9B,CADJ,CAdgC,CAgBM;AACtC;AACA;;AACA,WAAK/E,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiF,WAAW,CAAC9E,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACrC,aAAK8E,qBAAL,CAA2BG,WAAW,CAACjF,CAAD,CAAtC,EAA2C,CAA3C,EAA8C6B,GAAG,CAACqD,YAAlD;AACH;AACJ;AACJ,GA1BD;;AA2BA5E,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC0F,eAAhC,GAAkD,UAAUH,WAAV,EAAuB;AACrE,QAAIK,IAAI,GAAGL,WAAW,CAACM,GAAZ,CAAgBC,0BAAhB,CAAX;AACA,QAAIC,KAAK,GAAG,CACR;AACA;AAAEC,MAAAA,KAAK,EAAE,iBAAT;AAA4BC,MAAAA,KAAK,EAAE,CAAC;AAApC,KAFQ,EAGR;AACA;AAAED,MAAAA,KAAK,EAAE,eAAT;AAA0BC,MAAAA,KAAK,EAAE;AAAjC,KAJQ,EAKVC,MALU,CAKH,KAAKjF,OAAL,CAAakF,eALV,CAAZ;AAMAP,IAAAA,IAAI,CAACQ,IAAL,CAAU,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC5B,aAAOzJ,mBAAmB,CAACwJ,IAAD,EAAOC,IAAP,EAAaP,KAAb,CAA1B;AACH,KAFD;AAGA,WAAOH,IAAI,CAACC,GAAL,CAAS,UAAUU,CAAV,EAAa;AACzB,aAAOA,CAAC,CAACC,IAAT;AACH,KAFM,CAAP;AAGH,GAdD,CA3LyD,CA0MzD;AACA;;;AACA5F,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC6C,YAAhC,GAA+C,UAAU3B,IAAV,EAAgB;AAC3D,SAAK,IAAIuF,EAAE,GAAG,CAAT,EAAYC,MAAM,GAAGxF,IAA1B,EAAgCuF,EAAE,GAAGC,MAAM,CAACjG,MAA5C,EAAoDgG,EAAE,EAAtD,EAA0D;AACtD,UAAItE,GAAG,GAAGuE,MAAM,CAACD,EAAD,CAAhB;AACA3J,MAAAA,UAAU,CAACqF,GAAG,CAACC,EAAL,EAAS,KAAKuE,cAAL,CAAoBxE,GAApB,CAAT,CAAV;;AACA,UAAIA,GAAG,CAACyE,KAAJ,GAAY,CAAhB,EAAmB;AACfzE,QAAAA,GAAG,CAACC,EAAJ,CAAOyE,SAAP,CAAiBC,GAAjB,CAAqB,0BAArB;AACH,OALqD,CAMtD;AACA;;;AACA,UAAI3E,GAAG,CAACe,UAAJ,CAAeE,GAAf,CAAmB0B,KAAnB,IAA4B3C,GAAG,CAAC4E,MAAJ,GAAa5E,GAAG,CAAC6E,GAAjB,GAAuB,EAAvD,EAA2D;AACvD7E,QAAAA,GAAG,CAACC,EAAJ,CAAOyE,SAAP,CAAiBC,GAAjB,CAAqB,UAArB,EADuD,CACrB;AACrC;AACJ;AACJ,GAbD,CA5MyD,CA0NzD;AACA;;;AACAlG,EAAAA,qBAAqB,CAACZ,SAAtB,CAAgC2G,cAAhC,GAAiD,UAAUxE,GAAV,EAAe;AAC5D,QAAI8E,aAAa,GAAG,KAAKhG,OAAL,CAAaO,OAAb,CAAqB0F,gBAAzC;AACA,QAAIvB,aAAa,GAAGxD,GAAG,CAACwD,aAAxB,CAF4D,CAErB;;AACvC,QAAIH,YAAY,GAAGrD,GAAG,CAACqD,YAAvB,CAH4D,CAGvB;;AACrC,QAAI2B,KAAK,GAAG,KAAKrG,QAAL,CAAcsG,sBAAd,CAAqCjF,GAArC,CAAZ,CAJ4D,CAIL;;AACvD,QAAIkF,KAAK,GAAG,KAAKpG,OAAL,CAAaoG,KAAzB;AACA,QAAIC,IAAJ,CAN4D,CAMlD;;AACV,QAAIC,KAAJ,CAP4D,CAOjD;;AACX,QAAIN,aAAJ,EAAmB;AACf;AACAzB,MAAAA,YAAY,GAAGgC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY9B,aAAa,GAAG,CAACH,YAAY,GAAGG,aAAhB,IAAiC,CAA7D,CAAf;AACH;;AACD,QAAI0B,KAAJ,EAAW;AACPC,MAAAA,IAAI,GAAG,IAAI9B,YAAX;AACA+B,MAAAA,KAAK,GAAG5B,aAAR;AACH,KAHD,MAIK;AACD2B,MAAAA,IAAI,GAAG3B,aAAP;AACA4B,MAAAA,KAAK,GAAG,IAAI/B,YAAZ;AACH;;AACD2B,IAAAA,KAAK,CAACO,MAAN,GAAevF,GAAG,CAACyE,KAAJ,GAAY,CAA3B,CApB4D,CAoB9B;;AAC9BO,IAAAA,KAAK,CAACG,IAAN,GAAaA,IAAI,GAAG,GAAP,GAAa,GAA1B;AACAH,IAAAA,KAAK,CAACI,KAAN,GAAcA,KAAK,GAAG,GAAR,GAAc,GAA5B;;AACA,QAAIN,aAAa,IAAI9E,GAAG,CAACwF,eAAzB,EAA0C;AACtC;AACAR,MAAAA,KAAK,CAACE,KAAK,GAAG,YAAH,GAAkB,aAAxB,CAAL,GAA8C,KAAK,CAAnD,CAFsC,CAEgB;AACzD;;AACD,WAAOF,KAAP;AACH,GA5BD;;AA6BA,SAAOvG,qBAAP;AACH,CA1P0C,CA0PzC7D,eA1PyC,CAA3C,C,CA2PA;AACA;;;AACA,SAASkI,kBAAT,CAA4B/D,IAA5B,EAAkC;AAC9B,MAAI6D,MAAM,GAAG,EAAb;AACA,MAAIzE,CAAJ;AACA,MAAI6B,GAAJ;AACA,MAAIyF,CAAJ;;AACA,OAAKtH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,IAAI,CAACT,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B6B,IAAAA,GAAG,GAAGjB,IAAI,CAACZ,CAAD,CAAV,CAD8B,CAE9B;;AACA,SAAKsH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG7C,MAAM,CAACtE,MAAvB,EAA+BmH,CAAC,EAAhC,EAAoC;AAChC,UAAI,CAACC,wBAAwB,CAAC1F,GAAD,EAAM4C,MAAM,CAAC6C,CAAD,CAAZ,CAAxB,CAAyCnH,MAA9C,EAAsD;AAClD;AACH;AACJ;;AACD0B,IAAAA,GAAG,CAACyE,KAAJ,GAAYgB,CAAZ;AACA,KAAC7C,MAAM,CAAC6C,CAAD,CAAN,KAAc7C,MAAM,CAAC6C,CAAD,CAAN,GAAY,EAA1B,CAAD,EAAgCE,IAAhC,CAAqC3F,GAArC;AACH;;AACD,SAAO4C,MAAP;AACH,C,CACD;AACA;;;AACA,SAASG,sBAAT,CAAgCH,MAAhC,EAAwC;AACpC,MAAIzE,CAAJ;AACA,MAAIsG,KAAJ;AACA,MAAIgB,CAAJ;AACA,MAAIzF,GAAJ;AACA,MAAI4F,CAAJ;;AACA,OAAKzH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGyE,MAAM,CAACtE,MAAvB,EAA+BH,CAAC,EAAhC,EAAoC;AAChCsG,IAAAA,KAAK,GAAG7B,MAAM,CAACzE,CAAD,CAAd;;AACA,SAAKsH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhB,KAAK,CAACnG,MAAtB,EAA8BmH,CAAC,EAA/B,EAAmC;AAC/BzF,MAAAA,GAAG,GAAGyE,KAAK,CAACgB,CAAD,CAAX;AACAzF,MAAAA,GAAG,CAACoD,WAAJ,GAAkB,EAAlB;;AACA,WAAKwC,CAAC,GAAGzH,CAAC,GAAG,CAAb,EAAgByH,CAAC,GAAGhD,MAAM,CAACtE,MAA3B,EAAmCsH,CAAC,EAApC,EAAwC;AACpCF,QAAAA,wBAAwB,CAAC1F,GAAD,EAAM4C,MAAM,CAACgD,CAAD,CAAZ,EAAiB5F,GAAG,CAACoD,WAArB,CAAxB;AACH;AACJ;AACJ;AACJ,C,CACD;AACA;;;AACA,SAASJ,uBAAT,CAAiChD,GAAjC,EAAsC;AAClC,MAAIoD,WAAW,GAAGpD,GAAG,CAACoD,WAAtB;AACA,MAAIoC,eAAe,GAAG,CAAtB;AACA,MAAIrH,CAAJ;AACA,MAAI0H,UAAJ;;AACA,MAAI7F,GAAG,CAACwF,eAAJ,KAAwBlC,SAA5B,EAAuC;AAAE;AACrC,SAAKnF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGiF,WAAW,CAAC9E,MAA5B,EAAoCH,CAAC,EAArC,EAAyC;AACrC0H,MAAAA,UAAU,GAAGzC,WAAW,CAACjF,CAAD,CAAxB,CADqC,CAErC;;AACA6E,MAAAA,uBAAuB,CAAC6C,UAAD,CAAvB,CAHqC,CAIrC;AACA;;AACAL,MAAAA,eAAe,GAAGH,IAAI,CAACS,GAAL,CAASN,eAAT,EAA0B,IAAIK,UAAU,CAACL,eAAzC,CAAlB;AACH;;AACDxF,IAAAA,GAAG,CAACwF,eAAJ,GAAsBA,eAAtB;AACH;AACJ,C,CACD;AACA;;;AACA,SAASE,wBAAT,CAAkC1F,GAAlC,EAAuC+F,SAAvC,EAAkDC,OAAlD,EAA2D;AACvD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,OAAK,IAAI7H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4H,SAAS,CAACzH,MAA9B,EAAsCH,CAAC,EAAvC,EAA2C;AACvC,QAAI8H,kBAAkB,CAACjG,GAAD,EAAM+F,SAAS,CAAC5H,CAAD,CAAf,CAAtB,EAA2C;AACvC6H,MAAAA,OAAO,CAACL,IAAR,CAAaI,SAAS,CAAC5H,CAAD,CAAtB;AACH;AACJ;;AACD,SAAO6H,OAAP;AACH,C,CACD;;;AACA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,IAAlC,EAAwC;AACpC,SAAOD,IAAI,CAACtB,MAAL,GAAcuB,IAAI,CAACtB,GAAnB,IAA0BqB,IAAI,CAACrB,GAAL,GAAWsB,IAAI,CAACvB,MAAjD;AACH;;AACD,SAASjB,0BAAT,CAAoC3D,GAApC,EAAyC;AACrC,MAAIoG,GAAG,GAAGvL,kBAAkB,CAACmF,GAAD,CAA5B;AACAoG,EAAAA,GAAG,CAACZ,eAAJ,GAAsBxF,GAAG,CAACwF,eAA1B;AACAY,EAAAA,GAAG,CAAC5C,aAAJ,GAAoBxD,GAAG,CAACwD,aAAxB;AACA,SAAO4C,GAAP;AACH;;AAED,IAAIC,sBAAsB;AAAG;AAAe,UAAU3H,MAAV,EAAkB;AAC1DhB,EAAAA,SAAS,CAAC2I,sBAAD,EAAyB3H,MAAzB,CAAT;;AACA,WAAS2H,sBAAT,GAAkC;AAC9B,WAAO3H,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDgI,EAAAA,sBAAsB,CAACxI,SAAvB,CAAiC0B,UAAjC,GAA8C,UAAUR,IAAV,EAAgBC,UAAhB,EAA4B;AACtE,SAAKQ,SAAL,GAAiB,KAAKb,QAAL,CAAcc,cAAd,CAA6BV,IAA7B,CAAjB;AACA,SAAKJ,QAAL,CAAciB,eAAd,CAA8B,KAAKJ,SAAnC,EAA8C,KAAKb,QAAL,CAAc2H,kBAA5D;AACA,SAAKC,SAAL,GAAiBvH,UAAU,CAACuH,SAA5B;AACH,GAJD;;AAKAF,EAAAA,sBAAsB,CAACxI,SAAvB,CAAiC2G,cAAjC,GAAkD,UAAUxE,GAAV,EAAe;AAC7D,QAAIgF,KAAK,GAAGtG,MAAM,CAACb,SAAP,CAAiB2G,cAAjB,CAAgCjG,IAAhC,CAAqC,IAArC,EAA2CyB,GAA3C,CAAZ;;AACA,QAAIuG,SAAS,GAAG,KAAKA,SAArB;;AACA,QAAIA,SAAS,IAAIA,SAAS,CAAC7G,GAAV,KAAkBM,GAAG,CAACN,GAAvC,EAA4C;AACxC,UAAI8G,cAAc,GAAG9H,MAAM,CAACb,SAAP,CAAiB2G,cAAjB,CAAgCjG,IAAhC,CAAqC,IAArC,EAA2CgI,SAA3C,CAArB;;AACAvB,MAAAA,KAAK,CAACG,IAAN,GAAaqB,cAAc,CAACrB,IAA5B;AACAH,MAAAA,KAAK,CAACI,KAAN,GAAcoB,cAAc,CAACpB,KAA7B;AACAJ,MAAAA,KAAK,CAACyB,UAAN,GAAmBD,cAAc,CAACC,UAAlC;AACAzB,MAAAA,KAAK,CAAC0B,WAAN,GAAoBF,cAAc,CAACE,WAAnC;AACH;;AACD,WAAO1B,KAAP;AACH,GAXD;;AAYA,SAAOqB,sBAAP;AACH,CAvB2C,CAuB1C5H,qBAvB0C,CAA5C;;AAyBA,IAAIkI,oBAAoB;AAAG;AAAe,UAAUjI,MAAV,EAAkB;AACxDhB,EAAAA,SAAS,CAACiJ,oBAAD,EAAuBjI,MAAvB,CAAT;;AACA,WAASiI,oBAAT,CAA8BhI,QAA9B,EAAwC;AACpC,QAAIC,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;AACAK,IAAAA,KAAK,CAACD,QAAN,GAAiBA,QAAjB;AACA,WAAOC,KAAP;AACH;;AACD+H,EAAAA,oBAAoB,CAAC9I,SAArB,CAA+B0B,UAA/B,GAA4C,UAAUqH,IAAV,EAAgB7H,IAAhB,EAAsB;AAC9D,QAAIJ,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIkI,YAAJ,CAF8D,CAG9D;;AACA,QAAID,IAAI,KAAK,SAAb,EAAwB;AACpBC,MAAAA,YAAY,GAAGlI,QAAQ,CAACmI,cAAxB;AACH,KAFD,MAGK,IAAIF,IAAI,KAAK,eAAb,EAA8B;AAC/BC,MAAAA,YAAY,GAAGlI,QAAQ,CAACoI,oBAAxB;AACH,KAFI,MAGA,IAAIH,IAAI,KAAK,WAAb,EAA0B;AAC3BC,MAAAA,YAAY,GAAGlI,QAAQ,CAACqI,qBAAxB;AACH;;AACDrI,IAAAA,QAAQ,CAACiB,eAAT,CAAyBjB,QAAQ,CAACc,cAAT,CAAwBV,IAAxB,CAAzB,EAAwD8H,YAAxD;AACA,WAAO9H,IAAI,CAAC2E,GAAL,CAAS,UAAU1D,GAAV,EAAe;AAC3B,aAAOA,GAAG,CAACC,EAAX;AACH,KAFM,CAAP;AAGH,GAjBD;;AAkBA0G,EAAAA,oBAAoB,CAAC9I,SAArB,CAA+BqC,eAA/B,GAAiD,UAAUnB,IAAV,EAAgB;AAC7D,SAAKJ,QAAL,CAAc2B,mBAAd,CAAkCvB,IAAlC;AACH,GAFD;;AAGA4H,EAAAA,oBAAoB,CAAC9I,SAArB,CAA+B2C,cAA/B,GAAgD,UAAUzB,IAAV,EAAgB;AAC5D,SAAKJ,QAAL,CAAc8B,kBAAd,CAAiC1B,IAAjC;AACH,GAFD;;AAGA,SAAO4H,oBAAP;AACH,CAhCyC,CAgCxC7L,YAhCwC,CAA1C;AAkCA;;AAEA;AACA;;;AACA,IAAImM,0BAA0B,GAAG,CAC7B;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAD6B,EAE7B;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAF6B,EAG7B;AAAEA,EAAAA,OAAO,EAAE;AAAX,CAH6B,EAI7B;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAJ6B,EAK7B;AAAEA,EAAAA,OAAO,EAAE;AAAX,CAL6B,CAAjC;;AAOA,IAAIC,QAAQ;AAAG;AAAe,UAAU3I,MAAV,EAAkB;AAC5ChB,EAAAA,SAAS,CAAC2J,QAAD,EAAW3I,MAAX,CAAT;;AACA,WAAS2I,QAAT,CAAkBpH,EAAlB,EAAsBqH,WAAtB,EAAmC;AAC/B,QAAI1I,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkB0B,EAAlB,KAAyB,IAArC;;AACArB,IAAAA,KAAK,CAAC2I,gBAAN,GAAyB,KAAzB;AACA3I,IAAAA,KAAK,CAAC4I,eAAN,GAAwB,KAAxB;AACA5I,IAAAA,KAAK,CAAC6I,cAAN,GAAuB1M,OAAO,CAAC6D,KAAK,CAAC8I,eAAP,CAA9B;AACA9I,IAAAA,KAAK,CAAC+I,cAAN,GAAuB3M,gBAAgB,CAAC4D,KAAK,CAACgJ,eAAP,CAAvC;AACAhJ,IAAAA,KAAK,CAACiJ,WAAN,GAAoB7M,gBAAgB,CAAC4D,KAAK,CAACkJ,YAAP,EAAqB,IAArB,EAA2B,CAAClJ,KAAK,CAAC+I,cAAP,CAA3B,CAApC;AACA/I,IAAAA,KAAK,CAACmJ,aAAN,GAAsB/M,gBAAgB,CAAC4D,KAAK,CAACoJ,cAAP,EAAuBpJ,KAAK,CAACqJ,gBAA7B,EAA+C,CAACrJ,KAAK,CAAC+I,cAAP,CAA/C,CAAtC;AACA/I,IAAAA,KAAK,CAAC0I,WAAN,GAAoBA,WAApB;AACA,QAAIS,aAAa,GAAGnJ,KAAK,CAACmJ,aAA1B;AACA,QAAIG,aAAa,GAAGtJ,KAAK,CAACsJ,aAAN,GAAsB,IAAIzJ,qBAAJ,CAA0BG,KAA1B,CAA1C;AACA,QAAIuJ,YAAY,GAAGvJ,KAAK,CAACuJ,YAAN,GAAqB,IAAIxB,oBAAJ,CAAyB/H,KAAzB,CAAxC;AACAA,IAAAA,KAAK,CAACwJ,cAAN,GAAuB,IAAI/B,sBAAJ,CAA2BzH,KAA3B,CAAvB;AACAA,IAAAA,KAAK,CAACyJ,mBAAN,GAA4BrN,gBAAgB,CAACmN,YAAY,CAACtJ,UAAb,CAAwByJ,IAAxB,CAA6BH,YAA7B,EAA2C,eAA3C,CAAD,EAA8DA,YAAY,CAACI,QAAb,CAAsBD,IAAtB,CAA2BH,YAA3B,EAAyC,eAAzC,CAA9D,EAAyH,CAACJ,aAAD,CAAzH,CAA5C;AACAnJ,IAAAA,KAAK,CAAC4J,mBAAN,GAA4BxN,gBAAgB,CAAC4D,KAAK,CAAC6J,oBAAP,EAA6B7J,KAAK,CAAC8J,sBAAnC,EAA2D,CAACX,aAAD,CAA3D,CAA5C;AACAnJ,IAAAA,KAAK,CAAC+J,cAAN,GAAuB3N,gBAAgB,CAACkN,aAAa,CAACrJ,UAAd,CAAyByJ,IAAzB,CAA8BJ,aAA9B,CAAD,EAA+CA,aAAa,CAACK,QAAd,CAAuBD,IAAvB,CAA4BJ,aAA5B,CAA/C,EAA2F,CAACH,aAAD,CAA3F,CAAvC;AACAnJ,IAAAA,KAAK,CAACgK,cAAN,GAAuB5N,gBAAgB,CAACmN,YAAY,CAACtJ,UAAb,CAAwByJ,IAAxB,CAA6BH,YAA7B,EAA2C,SAA3C,CAAD,EAAwDA,YAAY,CAACI,QAAb,CAAsBD,IAAtB,CAA2BH,YAA3B,EAAyC,SAAzC,CAAxD,EAA6G,CAACJ,aAAD,CAA7G,CAAvC;AACAnJ,IAAAA,KAAK,CAACiK,oBAAN,GAA6B7N,gBAAgB,CAACkN,aAAa,CAACY,kBAAd,CAAiCR,IAAjC,CAAsCJ,aAAtC,CAAD,EAAuDA,aAAa,CAACa,oBAAd,CAAmCT,IAAnC,CAAwCJ,aAAxC,CAAvD,EAA+G,CAACtJ,KAAK,CAAC+J,cAAP,CAA/G,CAA7C;AACA/J,IAAAA,KAAK,CAACoK,eAAN,GAAwBhO,gBAAgB,CAAC4D,KAAK,CAACqK,gBAAP,EAAyBrK,KAAK,CAACsK,kBAA/B,EAAmD,CAACnB,aAAD,CAAnD,CAAxC;AACAnJ,IAAAA,KAAK,CAACuK,iBAAN,GAA0BnO,gBAAgB,CAAC4D,KAAK,CAACwK,kBAAP,EAA2BxK,KAAK,CAACyK,oBAAjC,EAAuD,CAACtB,aAAD,CAAvD,CAA1C;AACA,WAAOnJ,KAAP;AACH;AACD;;AAEA;AACA;;;AACAyI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB6J,eAAnB,GAAqC,UAAUrI,OAAV,EAAmB;AACpD,QAAIiK,YAAY,GAAGjK,OAAO,CAACiK,YAA3B;AAAA,QAAyCC,YAAY,GAAGlK,OAAO,CAACkK,YAAhE;AACA,QAAIC,YAAJ;AACA,QAAIC,KAAJ;AACAH,IAAAA,YAAY,GAAGrO,cAAc,CAACqO,YAAD,CAA7B;AACAC,IAAAA,YAAY,GAAGA,YAAY,GAAGtO,cAAc,CAACsO,YAAD,CAAjB,GAAkCD,YAA7D;AACAE,IAAAA,YAAY,GAAGtO,oBAAoB,CAACoO,YAAD,EAAeC,YAAf,CAAnC;;AACA,QAAIC,YAAY,KAAK,IAArB,EAA2B;AACvBD,MAAAA,YAAY,GAAGD,YAAf;AACAE,MAAAA,YAAY,GAAG,CAAf,CAFuB,CAGvB;AACH;;AACD,SAAKF,YAAL,GAAoBA,YAApB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,YAAL,GAAoBA,YAApB,CAdoD,CAepD;AACA;;AACAC,IAAAA,KAAK,GAAGpK,OAAO,CAACqK,eAAhB;;AACA,QAAInM,KAAK,CAACoM,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtBA,MAAAA,KAAK,GAAGA,KAAK,CAACA,KAAK,CAACnL,MAAN,GAAe,CAAhB,CAAb;AACH;;AACD,SAAKsL,WAAL,GAAmB1P,eAAe,CAACuP,KAAK,IAAI;AACxCvK,MAAAA,IAAI,EAAE,SADkC;AAExCC,MAAAA,MAAM,EAAE,SAFgC;AAGxC0K,MAAAA,cAAc,EAAE,IAHwB;AAIxCjJ,MAAAA,QAAQ,EAAE;AAJ8B,KAAV,CAAlC;AAMA6I,IAAAA,KAAK,GAAGpK,OAAO,CAACyK,iBAAhB;AACA,SAAKC,aAAL,GAAqBN,KAAK,GACtBxO,cAAc,CAACwO,KAAD,CADQ,GAEtB,KAAKO,oBAAL,CAA0BV,YAA1B,CAFJ;AAGH,GA/BD,CA5B4C,CA4D5C;;;AACAjC,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBmM,oBAAnB,GAA0C,UAAUV,YAAV,EAAwB;AAC9D,QAAInL,CAAJ;AACA,QAAI4L,aAAJ;AACA,QAAIE,aAAJ,CAH8D,CAI9D;;AACA,SAAK9L,CAAC,GAAG8I,0BAA0B,CAAC3I,MAA3B,GAAoC,CAA7C,EAAgDH,CAAC,IAAI,CAArD,EAAwDA,CAAC,EAAzD,EAA6D;AACzD4L,MAAAA,aAAa,GAAG9O,cAAc,CAACgM,0BAA0B,CAAC9I,CAAD,CAA3B,CAA9B;AACA8L,MAAAA,aAAa,GAAG/O,oBAAoB,CAAC6O,aAAD,EAAgBT,YAAhB,CAApC;;AACA,UAAIW,aAAa,KAAK,IAAlB,IAA0BA,aAAa,GAAG,CAA9C,EAAiD;AAC7C,eAAOF,aAAP;AACH;AACJ;;AACD,WAAOT,YAAP,CAZ8D,CAYzC;AACxB,GAbD;AAcA;;;;AAEAjC,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBqM,MAAnB,GAA4B,UAAUlF,KAAV,EAAiBlG,OAAjB,EAA0B;AAClD,SAAK2I,cAAL,CAAoB3I,OAAO,CAACO,OAA5B;AACA,QAAI8K,KAAK,GAAGnF,KAAK,CAACmF,KAAlB;AACA,SAAK9J,MAAL,GAAc8J,KAAK,CAAC7L,MAApB;AACA,SAAKqJ,cAAL,CAAoB7I,OAAO,CAACsL,KAA5B;AACA,SAAKvC,WAAL,CAAiB7C,KAAK,CAACqF,WAAvB;AACA,SAAKtC,aAAL,CAAmB/C,KAAK,CAACmF,KAAzB,EAAgCnF,KAAK,CAACqF,WAAtC;AACA,SAAKhC,mBAAL,CAAyBvJ,OAAzB,EAAkCkG,KAAK,CAACsF,gBAAxC;AACA,SAAK9B,mBAAL,CAAyBxD,KAAK,CAACuF,iBAA/B;AACA,SAAK5B,cAAL,CAAoB7J,OAApB,EAA6BkG,KAAK,CAACwF,WAAnC;AACA,SAAK5B,cAAL,CAAoB9J,OAApB,EAA6BkG,KAAK,CAACyF,WAAnC;AACA,SAAK5B,oBAAL,CAA0B7D,KAAK,CAAC0F,cAAhC;AACA,SAAK1B,eAAL,CAAqBhE,KAAK,CAAC2F,SAA3B;AACA,SAAKxB,iBAAL,CAAuBnE,KAAK,CAAC4F,WAA7B;AACH,GAdD;;AAeAvD,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBgN,OAAnB,GAA6B,YAAY;AACrCnM,IAAAA,MAAM,CAACb,SAAP,CAAiBgN,OAAjB,CAAyBtM,IAAzB,CAA8B,IAA9B,EADqC,CAErC;;;AACA,SAAKsJ,WAAL,CAAiBU,QAAjB;AACA,SAAKR,aAAL,CAAmBQ,QAAnB;AACA,SAAKZ,cAAL,CAAoBY,QAApB;AACH,GAND;;AAOAlB,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBiN,UAAnB,GAAgC,UAAUC,QAAV,EAAoB;AAChD,QAAI3K,EAAE,GAAG,IAAT;AAAA,QAAe+H,YAAY,GAAG/H,EAAE,CAAC+H,YAAjC;AAAA,QAA+CD,aAAa,GAAG9H,EAAE,CAAC8H,aAAlE;AAAA,QAAiFE,cAAc,GAAGhI,EAAE,CAACgI,cAArG;;AACA,QAAI2C,QAAQ,IAAI,KAAKxD,gBAArB,EAAuC;AACnC,WAAKyD,kBAAL;AACA,WAAKzD,gBAAL,GAAwB,KAAxB;AACH;;AACD,QAAIwD,QAAQ,IAAI,KAAKvD,eAArB,EAAsC;AAClC,WAAKyD,iBAAL;AACA,WAAKzD,eAAL,GAAuB,KAAvB;AACH;;AACDW,IAAAA,YAAY,CAAC+C,YAAb,CAA0BH,QAA1B;AACA7C,IAAAA,aAAa,CAACgD,YAAd,CAA2BH,QAA3B;AACA3C,IAAAA,cAAc,CAAC8C,YAAf,CAA4BH,QAA5B;AACA5C,IAAAA,YAAY,CAACgD,WAAb,CAAyBJ,QAAzB;AACA7C,IAAAA,aAAa,CAACiD,WAAd,CAA0BJ,QAA1B;AACA3C,IAAAA,cAAc,CAAC+C,WAAf,CAA2BJ,QAA3B;AACH,GAhBD;;AAiBA1D,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB+J,eAAnB,GAAqC,UAAUwC,KAAV,EAAiB;AAClD,QAAInK,EAAE,GAAG,KAAKA,EAAd;AACAA,IAAAA,EAAE,CAACmL,SAAH,GACI,8BACI,8BADJ,GAEI,wBAFJ,GAE+BhB,KAAK,CAACiB,QAAN,CAAe,cAAf,CAF/B,GAEgE,2BAHpE;AAIA,SAAKC,iBAAL,GAAyBrL,EAAE,CAACsL,aAAH,CAAiB,QAAjB,CAAzB;AACA,SAAKC,eAAL,GAAuBvL,EAAE,CAACsL,aAAH,CAAiB,WAAjB,CAAvB;AACA,SAAKE,YAAL,GAAoBxL,EAAE,CAACsL,aAAH,CAAiB,aAAjB,CAApB;AACH,GATD;;AAUAlE,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBiK,YAAnB,GAAkC,UAAUuC,WAAV,EAAuB;AACrD,QAAID,KAAK,GAAG,KAAKtL,OAAL,CAAasL,KAAzB;AACA,SAAKoB,eAAL,CAAqBJ,SAArB,GACI,mBAAmBhB,KAAK,CAACiB,QAAN,CAAe,WAAf,CAAnB,GAAiD,IAAjD,GACI,KAAKK,iBAAL,CAAuBrB,WAAvB,CADJ,GAEI,UAHR;AAIA,SAAKsB,OAAL,GAAexQ,YAAY,CAAC,KAAKqQ,eAAN,EAAuB,IAAvB,CAA3B;AACA,SAAKI,aAAL,GAAqB,IAAIxQ,aAAJ,CAAkB,KAAK6E,EAAvB,EAA2B,KAAK0L,OAAhC,EAAyC,KAAzC,EAAgD,IAAhD,CAAqD;AAArD,KAArB;AAEA,SAAKpE,gBAAL,GAAwB,IAAxB;AACH,GAVD,CA9H4C,CAyI5C;;;AACAF,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB6N,iBAAnB,GAAuC,UAAUrB,WAAV,EAAuB;AAC1D,QAAIjK,EAAE,GAAG,KAAKtB,OAAd;AAAA,QAAuB+M,OAAO,GAAGzL,EAAE,CAACyL,OAApC;AAAA,QAA6CzB,KAAK,GAAGhK,EAAE,CAACgK,KAAxD;AAAA,QAA+DlF,KAAK,GAAG9E,EAAE,CAAC8E,KAA1E;AACA,QAAI4G,IAAI,GAAG,EAAX;AACA,QAAIC,QAAQ,GAAG1Q,UAAU,CAACgP,WAAW,CAAC2B,WAAZ,CAAwB5J,KAAzB,CAAzB;AACA,QAAI6J,QAAQ,GAAG5B,WAAW,CAAC6B,OAA3B;AACA,QAAIC,YAAY,GAAGlR,cAAc,CAAC,CAAD,CAAjC;AACA,QAAImR,QAAJ,CAN0D,CAM5C;;AACd,QAAIC,SAAJ;AACA,QAAIC,QAAJ,CAR0D,CAS1D;;AACA,WAAOhR,SAAS,CAAC2Q,QAAD,CAAT,GAAsB3Q,SAAS,CAAC+O,WAAW,CAACkC,OAAb,CAAtC,EAA6D;AACzDH,MAAAA,QAAQ,GAAGP,OAAO,CAAClH,GAAR,CAAYoH,QAAZ,EAAsBE,QAAtB,CAAX;AACAI,MAAAA,SAAS,GAAGnR,oBAAoB,CAACiR,YAAD,EAAe,KAAKpC,aAApB,CAApB,KAA2D,IAAvE;AACAuC,MAAAA,QAAQ,GACJ,gCAAgClC,KAAK,CAACiB,QAAN,CAAe,eAAf,CAAhC,GAAkE,IAAlE,IACKgB,SAAS,GACN,WAAW;AACP5R,MAAAA,UAAU,CAACoR,OAAO,CAACW,MAAR,CAAeJ,QAAf,EAAyB,KAAKxC,WAA9B,CAAD,CADd,GAEI,SAHE,GAIN,EALR,IAMI,OAPR;AAQAkC,MAAAA,IAAI,IACA,oBAAoBvQ,mBAAmB,CAAC6Q,QAAD,CAAvC,GAAoD,GAApD,IACKC,SAAS,GAAG,EAAH,GAAQ,mBADtB,IAEI,GAFJ,IAGK,CAACnH,KAAD,GAASoH,QAAT,GAAoB,EAHzB,IAII,aAJJ,GAIoBlC,KAAK,CAACiB,QAAN,CAAe,eAAf,CAJpB,GAIsD,SAJtD,IAKKnG,KAAK,GAAGoH,QAAH,GAAc,EALxB,IAMI,OAPR;AAQAL,MAAAA,QAAQ,GAAGzQ,YAAY,CAACyQ,QAAD,EAAW,KAAK3C,YAAhB,CAAvB;AACA6C,MAAAA,YAAY,GAAG3Q,YAAY,CAAC2Q,YAAD,EAAe,KAAK7C,YAApB,CAA3B;AACH;;AACD,WAAOwC,IAAP;AACH,GAjCD;;AAkCAzE,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBmK,cAAnB,GAAoC,UAAUmC,KAAV,EAAiBE,WAAjB,EAA8B;AAC9D,QAAIjK,EAAE,GAAG,KAAKtB,OAAd;AAAA,QAAuB2N,QAAQ,GAAGrM,EAAE,CAACqM,QAArC;AAAA,QAA+CC,IAAI,GAAGtM,EAAE,CAACsM,IAAzD;AAAA,QAA+DxH,KAAK,GAAG9E,EAAE,CAAC8E,KAA1E;AAAA,QAAiFkF,KAAK,GAAGhK,EAAE,CAACgK,KAA5F;AAAA,QAAmGyB,OAAO,GAAGzL,EAAE,CAACyL,OAAhH;AACA,QAAIc,KAAK,GAAG,IAAI7P,QAAJ,CAAa,KAAKgC,OAAlB,CAAZ;AACA,SAAKwM,iBAAL,CAAuBF,SAAvB,GACI,mBAAmBhB,KAAK,CAACiB,QAAN,CAAe,WAAf,CAAnB,GAAiD,IAAjD,GACIsB,KAAK,CAACC,UAAN,CAAiB;AACbzC,MAAAA,KAAK,EAAEA,KADM;AAEbE,MAAAA,WAAW,EAAEA,WAFA;AAGbwC,MAAAA,eAAe,EAAE,KAAKvF,WAAL,CAAiBwF;AAHrB,KAAjB,CADJ,GAMI,UAPR;AAQA,SAAKC,MAAL,GAAc5R,YAAY,CAAC,KAAK8E,EAAN,EAAU,2BAAV,CAA1B;;AACA,SAAK,IAAIP,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKW,MAA7B,EAAqCX,GAAG,EAAxC,EAA4C;AACxC+M,MAAAA,QAAQ,CAACO,eAAT,CAAyB,WAAzB,EAAsC,CAClC;AACIC,QAAAA,IAAI,EAAEpB,OAAO,CAACqB,MAAR,CAAe/C,KAAK,CAACzK,GAAD,CAAL,CAAWuN,IAA1B,CADV;AAEIhN,QAAAA,EAAE,EAAE,KAAK8M,MAAL,CAAYrN,GAAZ,CAFR;AAGIgN,QAAAA,IAAI,EAAEA;AAHV,OADkC,CAAtC;AAOH;;AACD,QAAIxH,KAAJ,EAAW;AACP,WAAK6H,MAAL,CAAYI,OAAZ;AACH;;AACD,SAAKC,YAAL,GAAoB,IAAIhS,aAAJ,CAAkB,KAAK6E,EAAvB,EAA2B,KAAK8M,MAAhC,EAAwC,IAAxC,EAA8C;AAClE,SADoB,CAApB;AAEA,SAAKM,qBAAL;AACA,SAAK7F,eAAL,GAAuB,IAAvB;AACH,GA5BD;;AA6BAH,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBoK,gBAAnB,GAAsC,YAAY;AAC9C,SAAKqF,uBAAL;AACH,GAFD;AAGA;;AAEA;;;AACAjG,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBwP,qBAAnB,GAA2C,YAAY;AACnD,QAAInI,KAAK,GAAG,KAAKpG,OAAL,CAAaoG,KAAzB;AACA,QAAIqI,KAAK,GAAG,EAAZ;AACA,QAAIC,UAAJ;AACAD,IAAAA,KAAK,CAAC5H,IAAN,CAAW,KAAK2B,WAAL,CAAiBuF,eAAjB,EAAX;;AACA,SAAK,IAAI1O,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKkC,MAAzB,EAAiClC,CAAC,EAAlC,EAAsC;AAClCoP,MAAAA,KAAK,CAAC5H,IAAN,CAAW,SACP,8BADO,GAEP,4DAFO,GAGP,wCAHO,GAIP,4CAJO,GAKP,0CALO,GAMP,2CANO,GAOP,QAPO,GAQP,OARJ;AASH;;AACD,QAAIT,KAAJ,EAAW;AACPqI,MAAAA,KAAK,CAACJ,OAAN;AACH;;AACDK,IAAAA,UAAU,GAAG,KAAKC,iBAAL,GAAyBhS,aAAa,CAAC,sCAChD,SADgD,GAEhD,MAFgD,GAEvC8R,KAAK,CAAC9K,IAAN,CAAW,EAAX,CAFuC,GAEtB,OAFsB,GAGhD,UAHgD,GAIhD,QAJ+C,CAAnD;AAKA,SAAKiL,eAAL,GAAuBvS,YAAY,CAACqS,UAAD,EAAa,iBAAb,CAAnC;AACA,SAAKlH,kBAAL,GAA0BnL,YAAY,CAACqS,UAAD,EAAa,sBAAb,CAAtC;AACA,SAAK3N,cAAL,GAAsB1E,YAAY,CAACqS,UAAD,EAAa,+CAAb,CAAlC;AACA,SAAK1G,cAAL,GAAsB3L,YAAY,CAACqS,UAAD,EAAa,uBAAb,CAAlC;AACA,SAAKxG,qBAAL,GAA6B7L,YAAY,CAACqS,UAAD,EAAa,yBAAb,CAAzC;AACA,SAAKzG,oBAAL,GAA4B5L,YAAY,CAACqS,UAAD,EAAa,wBAAb,CAAxC;;AACA,QAAItI,KAAJ,EAAW;AACP,WAAKwI,eAAL,CAAqBP,OAArB;AACA,WAAK7G,kBAAL,CAAwB6G,OAAxB;AACA,WAAKtN,cAAL,CAAoBsN,OAApB;AACA,WAAKrG,cAAL,CAAoBqG,OAApB;AACA,WAAKnG,qBAAL,CAA2BmG,OAA3B;AACA,WAAKpG,oBAAL,CAA0BoG,OAA1B;AACH;;AACD,SAAKlN,EAAL,CAAQ0N,WAAR,CAAoBH,UAApB;AACH,GAvCD;;AAwCAnG,EAAAA,QAAQ,CAACxJ,SAAT,CAAmByP,uBAAnB,GAA6C,YAAY;AACrDnT,IAAAA,aAAa,CAAC,KAAKsT,iBAAN,CAAb;AACH,GAFD,CAvP4C,CA0P5C;;;AACApG,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB4B,cAAnB,GAAoC,UAAUV,IAAV,EAAgB;AAChD,QAAIS,SAAS,GAAG,EAAhB;AACA,QAAIrB,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKkC,MAArB,EAA6BlC,CAAC,EAA9B,EAAkC;AAC9BqB,MAAAA,SAAS,CAACmG,IAAV,CAAe,EAAf;AACH;;AACD,SAAKxH,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,IAAI,CAACT,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9BqB,MAAAA,SAAS,CAACT,IAAI,CAACZ,CAAD,CAAJ,CAAQuB,GAAT,CAAT,CAAuBiG,IAAvB,CAA4B5G,IAAI,CAACZ,CAAD,CAAhC;AACH;;AACD,WAAOqB,SAAP;AACH,GAVD,CA3P4C,CAsQ5C;AACA;;;AACA6H,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB+B,eAAnB,GAAqC,UAAUJ,SAAV,EAAqBqH,YAArB,EAAmC;AACpE,QAAInH,GAAJ;AACA,QAAIX,IAAJ;AACA,QAAIZ,CAAJ;;AACA,SAAKuB,GAAG,GAAG,CAAX,EAAcA,GAAG,GAAG,KAAKW,MAAzB,EAAiCX,GAAG,EAApC,EAAwC;AAAE;AACtCX,MAAAA,IAAI,GAAGS,SAAS,CAACE,GAAD,CAAhB;;AACA,WAAKvB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,IAAI,CAACT,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B0I,QAAAA,YAAY,CAACnH,GAAD,CAAZ,CAAkBiO,WAAlB,CAA8B5O,IAAI,CAACZ,CAAD,CAAJ,CAAQ8B,EAAtC;AACH;AACJ;AACJ,GAVD;AAWA;;;;AAEAoH,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB+P,mBAAnB,GAAyC,YAAY;AACjD,WAAO,QAAP,CADiD,CAChC;AACpB,GAFD;;AAGAvG,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBgQ,kBAAnB,GAAwC,UAAU9O,IAAV,EAAgBkO,IAAhB,EAAsB;AAC1D;AACA,QAAI,CAAC,KAAKS,eAAV,EAA2B;AACvB;AACH;;AACD,QAAI7I,GAAG,GAAG,KAAKiJ,cAAL,CAAoBb,IAApB,CAAV;AACA,QAAIc,KAAK,GAAG,EAAZ;AACA,QAAI5P,CAAJ,CAP0D,CAQ1D;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,IAAI,CAACT,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B,UAAI6P,MAAM,GAAGtS,aAAa,CAAC,KAAD,EAAQ;AAAEuS,QAAAA,SAAS,EAAE;AAAb,OAAR,CAA1B;AACAD,MAAAA,MAAM,CAACE,KAAP,CAAarJ,GAAb,GAAmBA,GAAG,GAAG,IAAzB;AACA,WAAK6I,eAAL,CAAqB3O,IAAI,CAACZ,CAAD,CAAJ,CAAQuB,GAA7B,EAAkCiO,WAAlC,CAA8CK,MAA9C;AACAD,MAAAA,KAAK,CAACpI,IAAN,CAAWqI,MAAX;AACH,KAdyD,CAe1D;;;AACA,QAAIjP,IAAI,CAACT,MAAL,GAAc,CAAlB,EAAqB;AAAE;AACnB,UAAI6P,OAAO,GAAGzS,aAAa,CAAC,KAAD,EAAQ;AAAEuS,QAAAA,SAAS,EAAE;AAAb,OAAR,CAA3B;AACAE,MAAAA,OAAO,CAACD,KAAR,CAAcrJ,GAAd,GAAoBA,GAAG,GAAG,IAA1B;AACA,WAAK4I,iBAAL,CAAuBE,WAAvB,CAAmCQ,OAAnC;AACAJ,MAAAA,KAAK,CAACpI,IAAN,CAAWwI,OAAX;AACH;;AACD,SAAKC,eAAL,GAAuBL,KAAvB;AACH,GAvBD;;AAwBA1G,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBwQ,oBAAnB,GAA0C,YAAY;AAClD,QAAI,KAAKD,eAAT,EAA0B;AACtB,WAAKA,eAAL,CAAqBrO,OAArB,CAA6B5F,aAA7B;AACA,WAAKiU,eAAL,GAAuB,IAAvB;AACH;AACJ,GALD;AAMA;;;;AAEA/G,EAAAA,QAAQ,CAACxJ,SAAT,CAAmByQ,kBAAnB,GAAwC,YAAY;AAChD,WAAO,KAAK9C,eAAL,CAAqB+C,qBAArB,GAA6CC,MAApD;AACH,GAFD,CAxT4C,CA2T5C;AACA;;;AACAnH,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBiQ,cAAnB,GAAoC,UAAUW,IAAV,EAAgBC,cAAhB,EAAgC;AAChE,QAAI,CAACA,cAAL,EAAqB;AACjBA,MAAAA,cAAc,GAAGrT,UAAU,CAACoT,IAAD,CAA3B;AACH;;AACD,WAAO,KAAKE,cAAL,CAAoB1T,cAAc,CAACwT,IAAI,CAACG,OAAL,KAAiBF,cAAc,CAACE,OAAf,EAAlB,CAAlC,CAAP;AACH,GALD,CA7T4C,CAmU5C;;;AACAvH,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB8Q,cAAnB,GAAoC,UAAUE,QAAV,EAAoB;AACpD,QAAIC,GAAG,GAAG,KAAKnD,OAAL,CAAarN,MAAvB;AACA,QAAI+L,WAAW,GAAG,KAAKrF,KAAL,CAAWqF,WAA7B;AACA,QAAI0E,YAAY,GAAG,CAACF,QAAQ,CAACG,YAAT,GAAwB1T,SAAS,CAAC+O,WAAW,CAAC6B,OAAb,CAAlC,IAA2D5Q,SAAS,CAAC,KAAKgO,YAAN,CAAvF,CAHoD,CAGwD;;AAC5G,QAAI2F,SAAJ;AACA,QAAIC,aAAJ,CALoD,CAMpD;AACA;AACA;;AACAH,IAAAA,YAAY,GAAG1J,IAAI,CAACS,GAAL,CAAS,CAAT,EAAYiJ,YAAZ,CAAf;AACAA,IAAAA,YAAY,GAAG1J,IAAI,CAACC,GAAL,CAASwJ,GAAT,EAAcC,YAAd,CAAf,CAVoD,CAWpD;AACA;;AACAE,IAAAA,SAAS,GAAG5J,IAAI,CAAC8J,KAAL,CAAWJ,YAAX,CAAZ;AACAE,IAAAA,SAAS,GAAG5J,IAAI,CAACC,GAAL,CAAS2J,SAAT,EAAoBH,GAAG,GAAG,CAA1B,CAAZ,CAdoD,CAepD;AACA;;AACAI,IAAAA,aAAa,GAAGH,YAAY,GAAGE,SAA/B;AACA,WAAO,KAAKrD,aAAL,CAAmBwD,IAAnB,CAAwBH,SAAxB,IACH,KAAKrD,aAAL,CAAmByD,SAAnB,CAA6BJ,SAA7B,IAA0CC,aAD9C;AAEH,GApBD,CApU4C,CAyV5C;;;AACA7H,EAAAA,QAAQ,CAACxJ,SAAT,CAAmByC,mBAAnB,GAAyC,UAAUvB,IAAV,EAAgB;AACrD,QAAIM,OAAO,GAAG,KAAKP,OAAL,CAAaO,OAA3B;AACA,QAAIiQ,cAAc,GAAGjQ,OAAO,CAACkQ,sBAA7B;AACA,QAAIpR,CAAJ;AACA,QAAI6B,GAAJ;AACA,QAAIwP,OAAJ;;AACA,SAAKrR,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,IAAI,CAACT,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B6B,MAAAA,GAAG,GAAGjB,IAAI,CAACZ,CAAD,CAAV;AACAqR,MAAAA,OAAO,GAAG,KAAKxK,KAAL,CAAWmF,KAAX,CAAiBnK,GAAG,CAACN,GAArB,EAA0BuN,IAApC;AACAjN,MAAAA,GAAG,CAAC6E,GAAJ,GAAU,KAAKiJ,cAAL,CAAoB9N,GAAG,CAACoC,KAAxB,EAA+BoN,OAA/B,CAAV;AACAxP,MAAAA,GAAG,CAAC4E,MAAJ,GAAaS,IAAI,CAACS,GAAL,CAAS9F,GAAG,CAAC6E,GAAJ,GAAUyK,cAAnB,EAAmC,KAAKxB,cAAL,CAAoB9N,GAAG,CAACsC,GAAxB,EAA6BkN,OAA7B,CAAnC,CAAb;AACH;AACJ,GAZD,CA1V4C,CAuW5C;AACA;;;AACAnI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB4C,kBAAnB,GAAwC,UAAU1B,IAAV,EAAgB;AACpD,QAAIZ,CAAJ;AACA,QAAI6B,GAAJ;;AACA,SAAK7B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGY,IAAI,CAACT,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B6B,MAAAA,GAAG,GAAGjB,IAAI,CAACZ,CAAD,CAAV;AACAxD,MAAAA,UAAU,CAACqF,GAAG,CAACC,EAAL,EAAS,KAAKgF,sBAAL,CAA4BjF,GAA5B,CAAT,CAAV;AACH;AACJ,GAPD,CAzW4C,CAiX5C;;;AACAqH,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBoH,sBAAnB,GAA4C,UAAUjF,GAAV,EAAe;AACvD,WAAO;AACH6E,MAAAA,GAAG,EAAE7E,GAAG,CAAC6E,GADN;AAEHD,MAAAA,MAAM,EAAE,CAAC5E,GAAG,CAAC4E,MAFV,CAEiB;;AAFjB,KAAP;AAIH,GALD;AAMA;;;;AAEAyC,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB4R,mBAAnB,GAAyC,YAAY;AACjD,SAAKxE,iBAAL;AACA,SAAKD,kBAAL;AACH,GAHD;;AAIA3D,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBoN,iBAAnB,GAAuC,YAAY;AAC/C,SAAKmC,YAAL,CAAkBsC,KAAlB;AACH,GAFD;;AAGArI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBmN,kBAAnB,GAAwC,YAAY;AAChD,SAAKY,aAAL,CAAmB8D,KAAnB;AACH,GAFD;AAGA;;;;AAEArI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB8R,aAAnB,GAAmC,UAAUC,YAAV,EAAwBC,WAAxB,EAAqC;AACpE,QAAIhE,OAAO,GAAG,KAAK/M,OAAL,CAAa+M,OAA3B;;AACA,QAAIzL,EAAE,GAAG,IAAT;AAAA,QAAeoJ,YAAY,GAAGpJ,EAAE,CAACoJ,YAAjC;AAAA,QAA+CoC,aAAa,GAAGxL,EAAE,CAACwL,aAAlE;AAAA,QAAiFwB,YAAY,GAAGhN,EAAE,CAACgN,YAAnG;;AACA,QAAI0C,QAAQ,GAAG1C,YAAY,CAAC2C,WAAb,CAAyBH,YAAzB,CAAf;AACA,QAAIX,SAAS,GAAGrD,aAAa,CAACoE,UAAd,CAAyBH,WAAzB,CAAhB;;AACA,QAAIC,QAAQ,IAAI,IAAZ,IAAoBb,SAAS,IAAI,IAArC,EAA2C;AACvC,UAAIgB,OAAO,GAAGrE,aAAa,CAACwD,IAAd,CAAmBH,SAAnB,CAAd;AACA,UAAIiB,UAAU,GAAGtE,aAAa,CAACyD,SAAd,CAAwBJ,SAAxB,CAAjB;AACA,UAAIkB,OAAO,GAAG,CAACN,WAAW,GAAGI,OAAf,IAA0BC,UAAxC,CAHuC,CAGa;;AACpD,UAAIE,cAAc,GAAG/K,IAAI,CAAC8J,KAAL,CAAWgB,OAAO,GAAG3G,YAArB,CAArB,CAJuC,CAIkB;;AACzD,UAAI6G,SAAS,GAAGpB,SAAS,GAAGzF,YAAZ,GAA2B4G,cAA3C;AACA,UAAIZ,OAAO,GAAG,KAAKxK,KAAL,CAAWmF,KAAX,CAAiB2F,QAAjB,EAA2B7C,IAAzC;AACA,UAAIqD,IAAI,GAAG9U,YAAY,CAAC,KAAKwJ,KAAL,CAAWqF,WAAX,CAAuB6B,OAAxB,EAAiCvQ,gBAAgB,CAAC,KAAK4N,YAAN,EAAoB8G,SAApB,CAAjD,CAAvB;AACA,UAAIjO,KAAK,GAAGyJ,OAAO,CAAClH,GAAR,CAAY6K,OAAZ,EAAqBc,IAArB,CAAZ;AACA,UAAIhO,GAAG,GAAGuJ,OAAO,CAAClH,GAAR,CAAYvC,KAAZ,EAAmB,KAAKmH,YAAxB,CAAV;AACA,aAAO;AACH7J,QAAAA,GAAG,EAAEoQ,QADF;AAEHS,QAAAA,QAAQ,EAAE;AACNrO,UAAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAEA,KAAT;AAAgBE,YAAAA,GAAG,EAAEA;AAArB,WADD;AAENlB,UAAAA,MAAM,EAAE;AAFF,SAFP;AAMHoP,QAAAA,KAAK,EAAE,KAAKzD,MAAL,CAAY+C,QAAZ,CANJ;AAOHW,QAAAA,YAAY,EAAE;AACVtL,UAAAA,IAAI,EAAEiI,YAAY,CAACsD,KAAb,CAAmBZ,QAAnB,CADI;AAEV1K,UAAAA,KAAK,EAAEgI,YAAY,CAACuD,MAAb,CAAoBb,QAApB,CAFG;AAGVjL,UAAAA,GAAG,EAAEoL,OAHK;AAIVrL,UAAAA,MAAM,EAAEqL,OAAO,GAAGC;AAJR;AAPX,OAAP;AAcH;AACJ,GA9BD;AA+BA;;;;AAEA7I,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBoL,gBAAnB,GAAsC,UAAU2H,KAAV,EAAiB;AACnD,QAAIA,KAAJ,EAAW;AACP,WAAK1I,aAAL,CAAmB2I,UAAnB,CAA8BD,KAAK,CAACE,iBAApC;;AACA,UAAIF,KAAK,CAACG,OAAV,EAAmB;AACf,aAAK3I,cAAL,CAAoBvJ,UAApB,CAA+B,KAAKC,OAApC,EAA6C8R,KAAK,CAAC7R,IAAnD,EAAyD;AAAEiS,UAAAA,UAAU,EAAE,IAAd;AAAoBzK,UAAAA,SAAS,EAAEqK,KAAK,CAACrK;AAArC,SAAzD;AACH,OAFD,MAGK;AACD,aAAK4B,YAAL,CAAkBtJ,UAAlB,CAA6B,WAA7B,EAA0C,KAAKC,OAA/C,EAAwD8R,KAAK,CAAC7R,IAA9D;AACH;AACJ;AACJ,GAVD;;AAWAsI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBqL,kBAAnB,GAAwC,UAAU0H,KAAV,EAAiB;AACrD,QAAIA,KAAJ,EAAW;AACP,WAAK1I,aAAL,CAAmB+I,UAAnB,CAA8BL,KAAK,CAACE,iBAApC;;AACA,UAAIF,KAAK,CAACG,OAAV,EAAmB;AACf,aAAK3I,cAAL,CAAoBG,QAApB,CAA6B,KAAKzJ,OAAlC,EAA2C8R,KAAK,CAAC7R,IAAjD,EAAuD;AAAEiS,UAAAA,UAAU,EAAE,IAAd;AAAoBzK,UAAAA,SAAS,EAAEqK,KAAK,CAACrK;AAArC,SAAvD;AACH,OAFD,MAGK;AACD,aAAK4B,YAAL,CAAkBI,QAAlB,CAA2B,WAA3B,EAAwC,KAAKzJ,OAA7C;AACH;AACJ;AACJ,GAVD;AAWA;;;;AAEAuI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBuL,kBAAnB,GAAwC,UAAUwH,KAAV,EAAiB;AACrD,QAAIA,KAAJ,EAAW;AACP,WAAK1I,aAAL,CAAmB2I,UAAnB,CAA8BD,KAAK,CAACE,iBAApC;AACA,WAAK1I,cAAL,CAAoBvJ,UAApB,CAA+B,KAAKC,OAApC,EAA6C8R,KAAK,CAAC7R,IAAnD,EAAyD;AAAEmS,QAAAA,UAAU,EAAE,IAAd;AAAoB3K,QAAAA,SAAS,EAAEqK,KAAK,CAACrK;AAArC,OAAzD;AACH;AACJ,GALD;;AAMAc,EAAAA,QAAQ,CAACxJ,SAAT,CAAmBwL,oBAAnB,GAA0C,UAAUuH,KAAV,EAAiB;AACvD,QAAIA,KAAJ,EAAW;AACP,WAAK1I,aAAL,CAAmB+I,UAAnB,CAA8BL,KAAK,CAACE,iBAApC;AACA,WAAK1I,cAAL,CAAoBG,QAApB,CAA6B,KAAKzJ,OAAlC,EAA2C8R,KAAK,CAAC7R,IAAjD,EAAuD;AAAEmS,QAAAA,UAAU,EAAE,IAAd;AAAoB3K,QAAAA,SAAS,EAAEqK,KAAK,CAACrK;AAArC,OAAvD;AACH;AACJ,GALD;AAMA;;AAEA;;;AACAc,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB4K,oBAAnB,GAA0C,UAAU1J,IAAV,EAAgB;AACtD,QAAIA,IAAJ,EAAU;AACN,UAAI,KAAKD,OAAL,CAAaO,OAAb,CAAqB8R,YAAzB,EAAuC;AACnC,aAAK/I,cAAL,CAAoBvJ,UAApB,CAA+B,KAAKC,OAApC,EAA6CC,IAA7C,EAAmD;AAAEqS,UAAAA,WAAW,EAAE;AAAf,SAAnD;AACH,OAFD,MAGK;AACD,aAAKjJ,YAAL,CAAkBtJ,UAAlB,CAA6B,WAA7B,EAA0C,KAAKC,OAA/C,EAAwDC,IAAxD;AACH;AACJ;AACJ,GATD;;AAUAsI,EAAAA,QAAQ,CAACxJ,SAAT,CAAmB6K,sBAAnB,GAA4C,UAAU3J,IAAV,EAAgB;AACxD,QAAIA,IAAJ,EAAU;AACN,UAAI,KAAKD,OAAL,CAAaO,OAAb,CAAqB8R,YAAzB,EAAuC;AACnC,aAAK/I,cAAL,CAAoBG,QAApB,CAA6B,KAAKzJ,OAAlC,EAA2CC,IAA3C,EAAiD;AAAEqS,UAAAA,WAAW,EAAE;AAAf,SAAjD;AACH,OAFD,MAGK;AACD,aAAKjJ,YAAL,CAAkBI,QAAlB,CAA2B,WAA3B,EAAwC,KAAKzJ,OAA7C;AACH;AACJ;AACJ,GATD;;AAUA,SAAOuI,QAAP;AACH,CAne6B,CAme5BzL,aAne4B,CAA9B;;AAqeA,IAAIyV,cAAc;AAAG;AAAe,UAAU3S,MAAV,EAAkB;AAClDhB,EAAAA,SAAS,CAAC2T,cAAD,EAAiB3S,MAAjB,CAAT;;AACA,WAAS2S,cAAT,GAA0B;AACtB,WAAO3S,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDgT,EAAAA,cAAc,CAACxT,SAAf,CAAyByT,UAAzB,GAAsC,YAAY;AAC9C,WAAO;AACHlQ,MAAAA,MAAM,EAAE,EADL;AAEHmQ,MAAAA,KAAK,EAAE;AAFJ,KAAP;AAIH,GALD;;AAMAF,EAAAA,cAAc,CAACxT,SAAf,CAAyB2T,kBAAzB,GAA8C,UAAUjB,QAAV,EAAoB;AAC9D,QAAIA,QAAQ,CAACnP,MAAb,EAAqB;AACjB,aAAO,CAAC,QAAD,CAAP;AACH,KAFD,MAGK;AACD,aAAO,CAAC,OAAD,CAAP;AACH;AACJ,GAPD;;AAQAiQ,EAAAA,cAAc,CAACxT,SAAf,CAAyB4T,kBAAzB,GAA8C,UAAUzQ,QAAV,EAAoB;AAC9D,QAAI,CAACA,QAAQ,CAACI,MAAd,EAAsB;AAClB,aAAO,CAAC,OAAD,CAAP;AACH,KAFD,MAGK,IAAIvF,cAAc,CAACmF,QAAD,CAAlB,EAA8B;AAC/B,aAAO,CAAC,OAAD,EAAU,QAAV,CAAP;AACH,KAFI,MAGA;AACD,aAAO,CAAC,QAAD,CAAP;AACH;AACJ,GAVD;;AAWA,SAAOqQ,cAAP;AACH,CA/BmC,CA+BlCvV,QA/BkC,CAApC;;AAiCA,IAAI4V,4BAA4B,GAAG,CAAnC;AACA,IAAIC,kBAAkB,GAAGzX,eAAe,CAAC;AAAE0X,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAxC;AACA;;AAEA;AACA;;AACA,IAAIC,oBAAoB;AAAG;AAAe,UAAUnT,MAAV,EAAkB;AACxDhB,EAAAA,SAAS,CAACmU,oBAAD,EAAuBnT,MAAvB,CAAT;;AACA,WAASmT,oBAAT,GAAgC;AAC5B,QAAIjT,KAAK,GAAGF,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAAhE;;AACAO,IAAAA,KAAK,CAACkT,QAAN,GAAiB,IAAIT,cAAJ,EAAjB;AACAzS,IAAAA,KAAK,CAAC+I,cAAN,GAAuB3M,gBAAgB,CAAC4D,KAAK,CAACgJ,eAAP,EAAwBhJ,KAAK,CAACmT,iBAA9B,CAAvC;AACA;;AAEA;;AACAnT,IAAAA,KAAK,CAACoT,mBAAN,GAA4B,YAAY;AACpC,UAAI5R,EAAE,GAAGxB,KAAK,CAACE,OAAf;AAAA,UAAwBsL,KAAK,GAAGhK,EAAE,CAACgK,KAAnC;AAAA,UAA0CyB,OAAO,GAAGzL,EAAE,CAACyL,OAAvD;AAAA,UAAgExM,OAAO,GAAGe,EAAE,CAACf,OAA7E;AACA,UAAI6C,KAAK,GAAGtD,KAAK,CAACoG,KAAN,CAAYqF,WAAZ,CAAwB2B,WAApC;AACA,UAAIiG,MAAM,GAAGlW,QAAQ,CAACmG,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACI,GAApB,CAArB;AACA,UAAI4P,QAAJ;;AACA,UAAI7S,OAAO,CAAC8S,WAAZ,EAAyB;AACrBD,QAAAA,QAAQ,GAAGrG,OAAO,CAACW,MAAR,CAAetK,KAAK,CAACE,KAArB,EAA4BuP,kBAA5B,CAAX;AACA,eAAO,KACH,oCADG,GACoCvH,KAAK,CAACiB,QAAN,CAAe,cAAf,CADpC,GACqE,IADrE,GAC4EzM,KAAK,CAACwT,aAAN,EAD5E,GACoG,GADpG,GAEHpW,mBAAmB,EAAC;AACpBqD,QAAAA,OADmB,EACVwM,OADU,EACD;AAAEoB,UAAAA,IAAI,EAAE/K,KAAK,CAACE,KAAd;AAAqBwE,UAAAA,IAAI,EAAE,MAA3B;AAAmCyL,UAAAA,QAAQ,EAAEJ,MAAM,GAAG;AAAtD,SADC,EAC0DxX,UAAU,CAACyX,QAAD,CADpE,CAC+E;AAD/E,SAFhB,GAKH,OALJ;AAMH,OARD,MASK;AACD,eAAO,wBAAwB9H,KAAK,CAACiB,QAAN,CAAe,cAAf,CAAxB,GAAyD,IAAzD,GAAgEzM,KAAK,CAACwT,aAAN,EAAhE,GAAwF,QAA/F;AACH;AACJ,KAjBD;AAkBA;;AAEA;;;AACAxT,IAAAA,KAAK,CAAC0T,yBAAN,GAAkC,YAAY;AAC1C,UAAIlI,KAAK,GAAGxL,KAAK,CAACE,OAAN,CAAcsL,KAA1B;AACA,aAAO,wBAAwBA,KAAK,CAACiB,QAAN,CAAe,eAAf,CAAxB,GAA0D,IAA1D,GAAiEzM,KAAK,CAACwT,aAAN,EAAjE,GAAyF,QAAhG;AACH,KAHD,CA5B4B,CAgC5B;AACA;;;AACAxT,IAAAA,KAAK,CAAC2T,uBAAN,GAAgC,YAAY;AACxC,aAAO,yBAAyB3T,KAAK,CAACwT,aAAN,EAAzB,GAAiD,QAAxD;AACH,KAFD;AAGA;;AAEA;;;AACAxT,IAAAA,KAAK,CAAC4T,wBAAN,GAAiC,YAAY;AACzC,UAAIpS,EAAE,GAAGxB,KAAK,CAACE,OAAf;AAAA,UAAwBsL,KAAK,GAAGhK,EAAE,CAACgK,KAAnC;AAAA,UAA0C/K,OAAO,GAAGe,EAAE,CAACf,OAAvD;AACA,aAAO,KACH,qBADG,GACqB+K,KAAK,CAACiB,QAAN,CAAe,eAAf,CADrB,GACuD,IADvD,GAC8DzM,KAAK,CAACwT,aAAN,EAD9D,GACsF,GADtF,GAEH,QAFG,GAEQ;AACXnW,MAAAA,aAAa,CAACoD,OAAD,CAHV,GAIH,SAJG,GAKH,OALJ;AAMH,KARD,CAxC4B,CAiD5B;AACA;;;AACAT,IAAAA,KAAK,CAAC6T,sBAAN,GAA+B,YAAY;AACvC,aAAO,yBAAyB7T,KAAK,CAACwT,aAAN,EAAzB,GAAiD,QAAxD;AACH,KAFD;;AAGA,WAAOxT,KAAP;AACH;;AACDiT,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BqM,MAA/B,GAAwC,UAAUlF,KAAV,EAAiBlG,OAAjB,EAA0B;AAC9DJ,IAAAA,MAAM,CAACb,SAAP,CAAiBqM,MAAjB,CAAwB3L,IAAxB,CAA6B,IAA7B,EAAmCyG,KAAnC,EAA0ClG,OAA1C;;AACA,SAAK6I,cAAL,CAAoB7I,OAApB;AACH,GAHD;;AAIA+S,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BgN,OAA/B,GAAyC,YAAY;AACjDnM,IAAAA,MAAM,CAACb,SAAP,CAAiBgN,OAAjB,CAAyBtM,IAAzB,CAA8B,IAA9B;;AACA,SAAKoJ,cAAL,CAAoBY,QAApB;AACH,GAHD;;AAIAsJ,EAAAA,oBAAoB,CAAChU,SAArB,CAA+B+J,eAA/B,GAAiD,UAAU9I,OAAV,EAAmB;AAChE,SAAKmB,EAAL,CAAQyE,SAAR,CAAkBC,GAAlB,CAAsB,kBAAtB;AACA,SAAK1E,EAAL,CAAQmL,SAAR,GAAoB,KAAKsH,kBAAL,EAApB;AACA,SAAKC,QAAL,GAAgB,IAAIzW,eAAJ,CAAoB,QAApB,EAA8B;AAC9C,UADgB,CACT;AADS,KAAhB;AAGA,QAAI0W,cAAc,GAAG,KAAKD,QAAL,CAAc1S,EAAnC;AACA,SAAKA,EAAL,CAAQsL,aAAR,CAAsB,oBAAtB,EAA4CoC,WAA5C,CAAwDiF,cAAxD;AACAA,IAAAA,cAAc,CAAClO,SAAf,CAAyBC,GAAzB,CAA6B,wBAA7B;AACA,QAAIkO,UAAU,GAAGnX,aAAa,CAAC,KAAD,EAAQ;AAAEuS,MAAAA,SAAS,EAAE;AAAb,KAAR,CAA9B;AACA2E,IAAAA,cAAc,CAACjF,WAAf,CAA2BkF,UAA3B;AACA,SAAKlU,QAAL,GAAgB,IAAI0I,QAAJ,CAAawL,UAAb,EAAyB;AACrC/F,MAAAA,iBAAiB,EAAE,KAAKwF,yBADa;AAErCzF,MAAAA,eAAe,EAAE,KAAK0F;AAFe,KAAzB,CAAhB;;AAIA,QAAIzT,OAAO,CAACO,OAAR,CAAgByT,UAApB,EAAgC;AAAE;AAC9B,WAAKC,OAAL,GAAe,IAAIhW,OAAJ,EAAY;AAC3B,WAAKkD,EAAL,CAAQsL,aAAR,CAAsB,cAAtB,CADe,EACwB;AACnCyH,QAAAA,qBAAqB,EAAE,KAAKP,sBADO;AAEnC3F,QAAAA,iBAAiB,EAAE,KAAK0F,wBAFW;AAGnC3F,QAAAA,eAAe,EAAE,KAAK4F,sBAHa;AAInCQ,QAAAA,qBAAqB,EAAE,KAJY;AAKnCC,QAAAA,sBAAsB,EAAE;AALW,OADxB,CAAf,CAD4B,CAS5B;;AACA,UAAIC,SAAS,GAAG,KAAKlT,EAAL,CAAQsL,aAAR,CAAsB,aAAtB,CAAhB;AACA,WAAKwH,OAAL,CAAaK,kBAAb,GAAkCD,SAAS,CAAC5E,qBAAV,GAAkCC,MAApE;AACH;AACJ,GA5BD;;AA6BAqD,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BkU,iBAA/B,GAAmD,YAAY;AAC3D,SAAK9R,EAAL,CAAQyE,SAAR,CAAkB2O,MAAlB,CAAyB,kBAAzB;AACA,SAAK1U,QAAL,CAAckM,OAAd;;AACA,QAAI,KAAKkI,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAalI,OAAb;AACH;;AACD,SAAK8H,QAAL,CAAc9H,OAAd;AACH,GAPD;AAQA;;AAEA;AACA;;;AACAgH,EAAAA,oBAAoB,CAAChU,SAArB,CAA+B6U,kBAA/B,GAAoD,YAAY;AAC5D,QAAItS,EAAE,GAAG,KAAKtB,OAAd;AAAA,QAAuBsL,KAAK,GAAGhK,EAAE,CAACgK,KAAlC;AAAA,QAAyC/K,OAAO,GAAGe,EAAE,CAACf,OAAtD;AACA,WAAO,KACH,gBADG,GACgB+K,KAAK,CAACiB,QAAN,CAAe,WAAf,CADhB,GAC8C,IAD9C,IAEFhM,OAAO,CAACiU,YAAR,GACG,4BACI,MADJ,GAEI,+BAFJ,GAEsClJ,KAAK,CAACiB,QAAN,CAAe,cAAf,CAFtC,GAEuE,eAFvE,GAGI,OAHJ,GAII,UALP,GAMG,EARD,IASH,yBATG,GAUH,MAVG,GAWH,aAXG,GAWajB,KAAK,CAACiB,QAAN,CAAe,eAAf,CAXb,GAW+C,IAX/C,IAYFhM,OAAO,CAACyT,UAAR,GACG,oCACI,wBADJ,GAC+B1I,KAAK,CAACiB,QAAN,CAAe,cAAf,CAD/B,GACgE,MAFnE,GAGG,EAfD,IAgBH,OAhBG,GAiBH,OAjBG,GAkBH,UAlBG,GAmBH,UAnBJ;AAoBH,GAtBD;AAuBA;;;;AAEAwG,EAAAA,oBAAoB,CAAChU,SAArB,CAA+B+P,mBAA/B,GAAqD,YAAY;AAC7D,WAAO,KAAKjP,QAAL,CAAciP,mBAAd,EAAP;AACH,GAFD,CApIwD,CAuIxD;AACA;AACA;;;AACAiE,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BwQ,oBAA/B,GAAsD,YAAY;AAC9D,SAAK1P,QAAL,CAAc0P,oBAAd;AACH,GAFD;AAGA;;;;AAEAwD,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BiN,UAA/B,GAA4C,UAAUC,QAAV,EAAoBwI,UAApB,EAAgCC,MAAhC,EAAwC;AAChF9U,IAAAA,MAAM,CAACb,SAAP,CAAiBiN,UAAjB,CAA4BvM,IAA5B,CAAiC,IAAjC,EAAuCwM,QAAvC,EAAiDwI,UAAjD,EAA6DC,MAA7D,EADgF,CACV;;;AACtE,SAAK7U,QAAL,CAAcmM,UAAd,CAAyBC,QAAzB;;AACA,QAAI,KAAKgI,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAajI,UAAb,CAAwBC,QAAxB;AACH;AACJ,GAND,CA/IwD,CAsJxD;;;AACA8G,EAAAA,oBAAoB,CAAChU,SAArB,CAA+B4V,cAA/B,GAAgD,UAAU1I,QAAV,EAAoBwI,UAApB,EAAgCC,MAAhC,EAAwC;AACpF,QAAI5U,KAAK,GAAG,IAAZ;;AACA,QAAI8U,UAAJ;AACA,QAAIC,cAAJ;AACA,QAAIC,eAAJ,CAJoF,CAKpF;;AACA,SAAKC,SAAL,GAAiB1X,eAAe,CAAChB,YAAY,CAAC,KAAK8E,EAAN,EAAU,UAAV,CAAb,CAAhC,CANoF,CAOpF;AACA;;AACA,QAAI,CAAC,KAAKtB,QAAL,CAAcoO,MAAnB,EAA2B;AACvB,UAAI,CAACyG,MAAL,EAAa;AACTG,QAAAA,cAAc,GAAG,KAAKG,qBAAL,CAA2BP,UAA3B,CAAjB;AACA,aAAKZ,QAAL,CAAcoB,SAAd,CAAwBJ,cAAxB;AACH;;AACD;AACH,KAfmF,CAgBpF;;;AACA,QAAIK,cAAc,GAAG7Y,YAAY,CAAC,KAAK8E,EAAN,EAAU,SAAV,CAAZ,CAAiCgU,MAAjC,CAAwC,UAAUC,IAAV,EAAgB;AACzE,aAAO,CAACtV,KAAK,CAAC+T,QAAN,CAAe1S,EAAf,CAAkBkU,QAAlB,CAA2BD,IAA3B,CAAR;AACH,KAFoB,CAArB,CAjBoF,CAoBpF;;AACA,SAAKvV,QAAL,CAAc8M,YAAd,CAA2ByC,KAA3B,CAAiCkG,OAAjC,GAA2C,MAA3C,CArBoF,CAqBjC;;AACnD,SAAKzB,QAAL,CAAc0B,KAAd,GAtBoF,CAsB7D;;AACvBL,IAAAA,cAAc,CAACjU,OAAf,CAAuB3D,kBAAvB,EAvBoF,CAwBpF;;AACA,QAAI,KAAK2W,OAAT,EAAkB;AACd,WAAKA,OAAL,CAAauB,gBAAb,GADc,CACmB;;AACjCZ,MAAAA,UAAU,GAAG,KAAK5U,OAAL,CAAaO,OAAb,CAAqBqU,UAAlC;;AACA,UAAIA,UAAU,IAAI,OAAOA,UAAP,KAAsB,QAAxC,EAAkD;AAC9CA,QAAAA,UAAU,GAAGhC,4BAAb,CAD8C,CACH;AAC9C;;AACD,UAAIgC,UAAJ,EAAgB;AACZ,aAAKX,OAAL,CAAawB,SAAb,CAAuBb,UAAvB;AACH;AACJ;;AACD,QAAI,CAACF,MAAL,EAAa;AAAE;AACXG,MAAAA,cAAc,GAAG,KAAKG,qBAAL,CAA2BP,UAA3B,CAAjB;AACA,WAAKZ,QAAL,CAAcoB,SAAd,CAAwBJ,cAAxB;AACAC,MAAAA,eAAe,GAAG,KAAKjB,QAAL,CAAc6B,kBAAd,EAAlB;;AACA,UAAIZ,eAAe,CAACzO,IAAhB,IAAwByO,eAAe,CAACxO,KAA5C,EAAmD;AAAE;AACjD;AACA4O,QAAAA,cAAc,CAACjU,OAAf,CAAuB,UAAU0U,KAAV,EAAiB;AACpCpY,UAAAA,gBAAgB,CAACoY,KAAD,EAAQb,eAAR,CAAhB;AACH,SAFD,EAF+C,CAK/C;AACA;;AACAD,QAAAA,cAAc,GAAG,KAAKG,qBAAL,CAA2BP,UAA3B,CAAjB;AACA,aAAKZ,QAAL,CAAcoB,SAAd,CAAwBJ,cAAxB;AACH,OAbQ,CAcT;;;AACA,WAAKhB,QAAL,CAAc+B,YAAd,CAA2Bd,eAA3B,EAfS,CAgBT;AACA;;AACA,UAAI,KAAKjV,QAAL,CAAc2P,kBAAd,KAAqCqF,cAAzC,EAAyD;AACrD,aAAKhV,QAAL,CAAc8M,YAAd,CAA2ByC,KAA3B,CAAiCkG,OAAjC,GAA2C,EAA3C;AACH;AACJ;AACJ,GAzDD,CAvJwD,CAiNxD;;;AACAvC,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BiW,qBAA/B,GAAuD,UAAUP,UAAV,EAAsB;AACzE,WAAOA,UAAU,GACbjX,qBAAqB,CAAC,KAAK2D,EAAN,EAAU,KAAK0S,QAAL,CAAc1S,EAAxB,CADzB,CADyE,CAEnB;AACzD,GAHD;AAIA;;AAEA;;;AACA4R,EAAAA,oBAAoB,CAAChU,SAArB,CAA+B8W,iBAA/B,GAAmD,UAAU9F,QAAV,EAAoB;AACnE,QAAIhK,GAAG,GAAG,KAAKlG,QAAL,CAAcgQ,cAAd,CAA6BE,QAA7B,CAAV,CADmE,CAEnE;;AACAhK,IAAAA,GAAG,GAAGQ,IAAI,CAACuP,IAAL,CAAU/P,GAAV,CAAN;;AACA,QAAIA,GAAJ,EAAS;AACLA,MAAAA,GAAG,GADE,CACE;AACV;;AACD,WAAO;AAAEA,MAAAA,GAAG,EAAEA;AAAP,KAAP;AACH,GARD;;AASAgN,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BgX,eAA/B,GAAiD,YAAY;AACzD,WAAO;AAAEhQ,MAAAA,GAAG,EAAE,KAAK8N,QAAL,CAAcmC,YAAd;AAAP,KAAP;AACH,GAFD;;AAGAjD,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BkX,eAA/B,GAAiD,UAAUC,MAAV,EAAkB;AAC/D,QAAIA,MAAM,CAACnQ,GAAP,KAAevB,SAAnB,EAA8B;AAC1B,WAAKqP,QAAL,CAAcsC,YAAd,CAA2BD,MAAM,CAACnQ,GAAlC;AACH;AACJ,GAJD,CArOwD,CA0OxD;;;AACAgN,EAAAA,oBAAoB,CAAChU,SAArB,CAA+BuU,aAA/B,GAA+C,YAAY;AACvD,QAAI,KAAKyB,SAAL,IAAkB,IAAtB,EAA4B;AACxB,aAAO,kBAAkB,KAAKA,SAAvB,GAAmC,KAA1C;AACH;;AACD,WAAO,EAAP;AACH,GALD;;AAMA,SAAOhC,oBAAP;AACH,CAlPyC,CAkPxCtV,IAlPwC,CAA1C;;AAmPAsV,oBAAoB,CAAChU,SAArB,CAA+BqX,cAA/B,GAAgD,IAAhD,C,CAAsD;;AAEtD,IAAIC,cAAc;AAAG;AAAe,UAAUzW,MAAV,EAAkB;AAClDhB,EAAAA,SAAS,CAACyX,cAAD,EAAiBzW,MAAjB,CAAT;;AACA,WAASyW,cAAT,CAAwBxW,QAAxB,EAAkC;AAC9B,QAAIC,KAAK,GAAGF,MAAM,CAACH,IAAP,CAAY,IAAZ,EAAkBI,QAAQ,CAACsB,EAA3B,KAAkC,IAA9C;;AACArB,IAAAA,KAAK,CAACwW,cAAN,GAAuBra,OAAO,CAACqa,cAAD,CAA9B;AACAxW,IAAAA,KAAK,CAACyW,MAAN,GAAe,IAAIC,cAAJ,EAAf;AACA1W,IAAAA,KAAK,CAACD,QAAN,GAAiBA,QAAjB;AACA,WAAOC,KAAP;AACH;;AACDuW,EAAAA,cAAc,CAACtX,SAAf,CAAyB0X,YAAzB,GAAwC,UAAUzW,OAAV,EAAmB;AACvDA,IAAAA,OAAO,CAAC2N,QAAR,CAAiB+I,4BAAjB,CAA8C,IAA9C,EAAoD;AAChDvV,MAAAA,EAAE,EAAE,KAAKtB,QAAL,CAAcsB;AAD8B,KAApD;AAGH,GAJD;;AAKAkV,EAAAA,cAAc,CAACtX,SAAf,CAAyBgN,OAAzB,GAAmC,YAAY;AAC3CnM,IAAAA,MAAM,CAACb,SAAP,CAAiBgN,OAAjB,CAAyBtM,IAAzB,CAA8B,IAA9B;;AACA,SAAKO,OAAL,CAAa2N,QAAb,CAAsBgJ,8BAAtB,CAAqD,IAArD;AACH,GAHD;;AAIAN,EAAAA,cAAc,CAACtX,SAAf,CAAyBqM,MAAzB,GAAkC,UAAUlF,KAAV,EAAiBlG,OAAjB,EAA0B;AACxD,QAAI+M,OAAO,GAAG,KAAK/M,OAAL,CAAa+M,OAA3B;AACA,QAAIxB,WAAW,GAAGrF,KAAK,CAACqF,WAAxB;AAAA,QAAqCqL,QAAQ,GAAG1Q,KAAK,CAAC0Q,QAAtD;AACA,QAAIC,SAAS,GAAG,KAAKA,SAAL,GAAiB,KAAKP,cAAL,CAAoBM,QAApB,EAA8BrL,WAA9B,EAA2CwB,OAA3C,CAAjC;AACA,SAAKlN,QAAL,CAAciX,YAAd,CAA2B7X,QAAQ,CAAC,EAAD,EAAK,KAAKsX,MAAL,CAAYQ,UAAZ,CAAuB7Q,KAAvB,EAA8BqF,WAA9B,EAA2C,IAA3C,EAAiDvL,OAAO,CAAC2N,QAAzD,EAAmE,KAAK9N,QAAxE,EAAkFgX,SAAlF,CAAL,EAAmG;AAAEtL,MAAAA,WAAW,EAAEA,WAAf;AAA4BF,MAAAA,KAAK,EAAEuL,QAAQ,CAACvL,KAAT,CAAe,CAAf;AAAnC,KAAnG,CAAnC,EAA+LrL,OAA/L;AACH,GALD;;AAMAqW,EAAAA,cAAc,CAACtX,SAAf,CAAyBgQ,kBAAzB,GAA8C,UAAUZ,IAAV,EAAgB;AAC1D,SAAKtO,QAAL,CAAckP,kBAAd,CAAiC,KAAKwH,MAAL,CAAYS,YAAZ,CAAyB7I,IAAzB,EAA+B,KAAKtO,QAApC,EAA8C,KAAKgX,SAAnD,CAAjC,EAAgG1I,IAAhG;AACH,GAFD;;AAGAkI,EAAAA,cAAc,CAACtX,SAAf,CAAyB4R,mBAAzB,GAA+C,YAAY;AACvD,SAAK9Q,QAAL,CAAc8Q,mBAAd;AACH,GAFD;;AAGA0F,EAAAA,cAAc,CAACtX,SAAf,CAAyBkY,QAAzB,GAAoC,UAAUnG,YAAV,EAAwBC,WAAxB,EAAqC;AACrE,QAAImG,MAAM,GAAG,KAAKrX,QAAL,CAAcgR,aAAd,CAA4BC,YAA5B,EAA0CC,WAA1C,CAAb;;AACA,QAAImG,MAAJ,EAAY;AACR,aAAO;AACHC,QAAAA,SAAS,EAAE,KAAKtX,QADb;AAEH4R,QAAAA,QAAQ,EAAEyF,MAAM,CAACzF,QAFd;AAGHC,QAAAA,KAAK,EAAEwF,MAAM,CAACxF,KAHX;AAIH0F,QAAAA,IAAI,EAAE;AACF/Q,UAAAA,IAAI,EAAE6Q,MAAM,CAACvF,YAAP,CAAoBtL,IADxB;AAEFC,UAAAA,KAAK,EAAE4Q,MAAM,CAACvF,YAAP,CAAoBrL,KAFzB;AAGFP,UAAAA,GAAG,EAAEmR,MAAM,CAACvF,YAAP,CAAoB5L,GAHvB;AAIFD,UAAAA,MAAM,EAAEoR,MAAM,CAACvF,YAAP,CAAoB7L;AAJ1B,SAJH;AAUHuR,QAAAA,KAAK,EAAE;AAVJ,OAAP;AAYH;AACJ,GAhBD;;AAiBA,SAAOhB,cAAP;AACH,CAhDmC,CAgDlCvZ,aAhDkC,CAApC;;AAiDA,SAASwZ,cAAT,CAAwBM,QAAxB,EAAkCrL,WAAlC,EAA+CwB,OAA/C,EAAwD;AACpD,MAAIuK,MAAM,GAAG,EAAb;;AACA,OAAK,IAAI9R,EAAE,GAAG,CAAT,EAAYlE,EAAE,GAAGsV,QAAQ,CAACW,WAA/B,EAA4C/R,EAAE,GAAGlE,EAAE,CAAC9B,MAApD,EAA4DgG,EAAE,EAA9D,EAAkE;AAC9D,QAAI2I,IAAI,GAAG7M,EAAE,CAACkE,EAAD,CAAb;AACA8R,IAAAA,MAAM,CAACzQ,IAAP,CAAY;AACRvD,MAAAA,KAAK,EAAEyJ,OAAO,CAAClH,GAAR,CAAYsI,IAAZ,EAAkB5C,WAAW,CAAC6B,OAA9B,CADC;AAER5J,MAAAA,GAAG,EAAEuJ,OAAO,CAAClH,GAAR,CAAYsI,IAAZ,EAAkB5C,WAAW,CAACkC,OAA9B;AAFG,KAAZ;AAIH;;AACD,SAAO6J,MAAP;AACH;;AACD,IAAId,cAAc;AAAG;AAAe,UAAU5W,MAAV,EAAkB;AAClDhB,EAAAA,SAAS,CAAC4X,cAAD,EAAiB5W,MAAjB,CAAT;;AACA,WAAS4W,cAAT,GAA0B;AACtB,WAAO5W,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDiX,EAAAA,cAAc,CAACzX,SAAf,CAAyByY,UAAzB,GAAsC,UAAUpU,KAAV,EAAiByT,SAAjB,EAA4B;AAC9D,QAAI5W,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIW,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGiW,SAAS,CAACrX,MAAlC,EAA0CoB,GAAG,EAA7C,EAAiD;AAC7C,UAAI6W,QAAQ,GAAG/Z,eAAe,CAAC0F,KAAD,EAAQyT,SAAS,CAACjW,GAAD,CAAjB,CAA9B;;AACA,UAAI6W,QAAJ,EAAc;AACVxX,QAAAA,IAAI,CAAC4G,IAAL,CAAU;AACNvD,UAAAA,KAAK,EAAEmU,QAAQ,CAACnU,KADV;AAENE,UAAAA,GAAG,EAAEiU,QAAQ,CAACjU,GAFR;AAGNf,UAAAA,OAAO,EAAEgV,QAAQ,CAACnU,KAAT,CAAewM,OAAf,OAA6B1M,KAAK,CAACE,KAAN,CAAYwM,OAAZ,EAHhC;AAINnN,UAAAA,KAAK,EAAE8U,QAAQ,CAACjU,GAAT,CAAasM,OAAb,OAA2B1M,KAAK,CAACI,GAAN,CAAUsM,OAAV,EAJ5B;AAKNlP,UAAAA,GAAG,EAAEA;AALC,SAAV;AAOH;AACJ;;AACD,WAAOX,IAAP;AACH,GAfD;;AAgBA,SAAOuW,cAAP;AACH,CAtBmC,CAsBlC7Y,MAtBkC,CAApC;;AAwBA,IAAI+Z,YAAY;AAAG;AAAe,UAAU9X,MAAV,EAAkB;AAChDhB,EAAAA,SAAS,CAAC8Y,YAAD,EAAe9X,MAAf,CAAT;;AACA,WAAS8X,YAAT,GAAwB;AACpB,QAAI5X,KAAK,GAAGF,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACF,KAAP,CAAa,IAAb,EAAmBH,SAAnB,CAAnB,IAAoD,IAAhE;;AACAO,IAAAA,KAAK,CAAC6X,aAAN,GAAsB1b,OAAO,CAAC0b,aAAD,CAA7B;AACA,WAAO7X,KAAP;AACH;;AACD4X,EAAAA,YAAY,CAAC3Y,SAAb,CAAuBqM,MAAvB,GAAgC,UAAUlF,KAAV,EAAiBlG,OAAjB,EAA0B;AACtDJ,IAAAA,MAAM,CAACb,SAAP,CAAiBqM,MAAjB,CAAwB3L,IAAxB,CAA6B,IAA7B,EAAmCyG,KAAnC,EAA0ClG,OAA1C,EADsD,CACF;;;AACpD,QAAIsB,EAAE,GAAG,KAAK4E,KAAd;AAAA,QAAqBqF,WAAW,GAAGjK,EAAE,CAACiK,WAAtC;AAAA,QAAmDqM,oBAAoB,GAAGtW,EAAE,CAACsW,oBAA7E;AACA,QAAIC,gBAAgB,GAAG7X,OAAO,CAAC6X,gBAA/B;AACA,QAAIjB,QAAQ,GAAG,KAAKe,aAAL,CAAmBpM,WAAnB,EAAgCqM,oBAAhC,CAAf;AACA,QAAIE,UAAU,GAAG,KAAK9E,QAAL,CAAc8E,UAAd,CAAyB5R,KAAzB,CAAjB;;AACA,QAAI,KAAK6R,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYjB,YAAZ,CAAyB;AACrBvL,QAAAA,WAAW,EAAEA,WADQ;AAErByM,QAAAA,KAAK,EAAEpB,QAAQ,CAACW,WAFK;AAGrBU,QAAAA,oBAAoB,EAAE,IAHD;AAIrBlK,QAAAA,eAAe,EAAE,KAAKmF;AAJD,OAAzB,EAKGlT,OALH;AAMH;;AACD,SAAKkY,cAAL,CAAoBpB,YAApB,CAAiC7X,QAAQ,CAAC,EAAD,EAAK6Y,UAAU,CAAC,OAAD,CAAf,EAA0B;AAAEvM,MAAAA,WAAW,EAAEA,WAAf;AAC/DqL,MAAAA,QAAQ,EAAEA;AADqD,KAA1B,CAAzC,EAC2B5W,OAD3B;;AAEA,QAAI,KAAKmY,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBrB,YAAnB,CAAgC7X,QAAQ,CAAC,EAAD,EAAK6Y,UAAU,CAAC,QAAD,CAAf,EAA2B;AAAEvM,QAAAA,WAAW,EAAEA,WAAf;AAC/DqL,QAAAA,QAAQ,EAAEA,QADqD;AAE/DiB,QAAAA,gBAAgB,EAAEA,gBAF6C;AAE3BO,QAAAA,OAAO,EAAE;AAFkB,OAA3B,CAAxC,EAE2DpY,OAF3D;AAGH;;AACD,SAAKqY,iBAAL,CAAuB9M,WAAvB,EAAoCqM,oBAApC;AACH,GAtBD;;AAuBAF,EAAAA,YAAY,CAAC3Y,SAAb,CAAuB+J,eAAvB,GAAyC,UAAU9I,OAAV,EAAmB;AACxDJ,IAAAA,MAAM,CAACb,SAAP,CAAiB+J,eAAjB,CAAiCrJ,IAAjC,CAAsC,IAAtC,EAA4CO,OAA5C;;AACA,QAAIA,OAAO,CAACO,OAAR,CAAgBiU,YAApB,EAAkC;AAC9B,WAAKuD,MAAL,GAAc,IAAIna,SAAJ,CAAc,KAAKuD,EAAL,CAAQsL,aAAR,CAAsB,oBAAtB,CAAd,CAAd;AACH;;AACD,SAAKyL,cAAL,GAAsB,IAAI7B,cAAJ,CAAmB,KAAKxW,QAAxB,CAAtB;;AACA,QAAI,KAAKoU,OAAT,EAAkB;AACd,WAAKkE,aAAL,GAAqB,IAAIja,aAAJ,CAAkB,KAAK+V,OAAvB,CAArB;AACH;AACJ,GATD;;AAUAyD,EAAAA,YAAY,CAAC3Y,SAAb,CAAuBkU,iBAAvB,GAA2C,YAAY;AACnDrT,IAAAA,MAAM,CAACb,SAAP,CAAiBkU,iBAAjB,CAAmCxT,IAAnC,CAAwC,IAAxC;;AACA,QAAI,KAAKsY,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYhM,OAAZ;AACH;;AACD,SAAKmM,cAAL,CAAoBnM,OAApB;;AACA,QAAI,KAAKoM,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBpM,OAAnB;AACH;AACJ,GATD;;AAUA2L,EAAAA,YAAY,CAAC3Y,SAAb,CAAuBgQ,kBAAvB,GAA4C,UAAUZ,IAAV,EAAgB;AACxD,SAAK+J,cAAL,CAAoBnJ,kBAApB,CAAuCZ,IAAvC;AACH,GAFD;;AAGA,SAAOuJ,YAAP;AACH,CAtDiC,CAsDhC3E,oBAtDgC,CAAlC;;AAuDA,SAAS4E,aAAT,CAAuBpM,WAAvB,EAAoCqM,oBAApC,EAA0D;AACtD,MAAIU,SAAS,GAAG,IAAIza,SAAJ,CAAc0N,WAAW,CAAC2B,WAA1B,EAAuC0K,oBAAvC,CAAhB;AACA,SAAO,IAAI9Z,QAAJ,CAAawa,SAAb,EAAwB,KAAxB,CAAP;AACH;;AAED,IAAIC,IAAI,GAAGxa,YAAY,CAAC;AACpBya,EAAAA,WAAW,EAAE,cADO;AAEpBC,EAAAA,KAAK,EAAE;AACH5Y,IAAAA,QAAQ,EAAE;AACN6Y,MAAAA,KAAK,EAAEhB,YADD;AAEN1D,MAAAA,UAAU,EAAE,IAFN;AAGNxJ,MAAAA,YAAY,EAAE,UAHR;AAINvE,MAAAA,gBAAgB,EAAE,IAJZ,CAIiB;;AAJjB,KADP;AAOH0S,IAAAA,WAAW,EAAE;AACT7Q,MAAAA,IAAI,EAAE,UADG;AAETiI,MAAAA,QAAQ,EAAE;AAAE6I,QAAAA,IAAI,EAAE;AAAR;AAFD,KAPV;AAWHC,IAAAA,YAAY,EAAE;AACV/Q,MAAAA,IAAI,EAAE,UADI;AAEViI,MAAAA,QAAQ,EAAE;AAAE+I,QAAAA,KAAK,EAAE;AAAT;AAFA;AAXX;AAFa,CAAD,CAAvB;AAoBA,eAAeP,IAAf;AACA,SAASxF,oBAAT,EAA+BxK,QAA/B,EAAyCiO,cAAzC,EAAyDkB,YAAzD,EAAuEpB,cAAvE,EAAuFqB,aAAvF","sourcesContent":["/*!\nFullCalendar Time Grid Plugin v4.4.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\nimport { createFormatter, removeElement, computeEventDraggable, computeEventStartResizable, computeEventEndResizable, cssToStr, isMultiDayRange, htmlEscape, compareByFieldSpecs, applyStyle, FgEventRenderer, buildSegCompareObj, FillRenderer, memoize, memoizeRendering, createDuration, wholeDivideDurations, findElements, PositionCache, startOfDay, asRoughMs, formatIsoTimeString, addDurations, htmlToElement, createElement, multiplyDuration, DateComponent, hasBgRendering, Splitter, diffDays, buildGotoAnchorHtml, getAllDayHtml, ScrollComponent, matchCellWidths, uncompensateScroll, compensateScroll, subtractInnerElHeight, View, intersectRanges, Slicer, DayHeader, DaySeries, DayTable, createPlugin } from '@fullcalendar/core';\nimport { DayBgRow, DayGrid, SimpleDayGrid } from '@fullcalendar/daygrid';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n/*\nOnly handles foreground segs.\nDoes not own rendering. Use for low-level util methods by TimeGrid.\n*/\nvar TimeGridEventRenderer = /** @class */ (function (_super) {\n    __extends(TimeGridEventRenderer, _super);\n    function TimeGridEventRenderer(timeGrid) {\n        var _this = _super.call(this) || this;\n        _this.timeGrid = timeGrid;\n        return _this;\n    }\n    TimeGridEventRenderer.prototype.renderSegs = function (context, segs, mirrorInfo) {\n        _super.prototype.renderSegs.call(this, context, segs, mirrorInfo);\n        // TODO: dont do every time. memoize\n        this.fullTimeFormat = createFormatter({\n            hour: 'numeric',\n            minute: '2-digit',\n            separator: this.context.options.defaultRangeSeparator\n        });\n    };\n    // Given an array of foreground segments, render a DOM element for each, computes position,\n    // and attaches to the column inner-container elements.\n    TimeGridEventRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n        var segsByCol = this.timeGrid.groupSegsByCol(segs);\n        // order the segs within each column\n        // TODO: have groupSegsByCol do this?\n        for (var col = 0; col < segsByCol.length; col++) {\n            segsByCol[col] = this.sortEventSegs(segsByCol[col]);\n        }\n        this.segsByCol = segsByCol;\n        this.timeGrid.attachSegsByCol(segsByCol, this.timeGrid.fgContainerEls);\n    };\n    TimeGridEventRenderer.prototype.detachSegs = function (segs) {\n        segs.forEach(function (seg) {\n            removeElement(seg.el);\n        });\n        this.segsByCol = null;\n    };\n    TimeGridEventRenderer.prototype.computeSegSizes = function (allSegs) {\n        var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n        var colCnt = timeGrid.colCnt;\n        timeGrid.computeSegVerticals(allSegs); // horizontals relies on this\n        if (segsByCol) {\n            for (var col = 0; col < colCnt; col++) {\n                this.computeSegHorizontals(segsByCol[col]); // compute horizontal coordinates, z-index's, and reorder the array\n            }\n        }\n    };\n    TimeGridEventRenderer.prototype.assignSegSizes = function (allSegs) {\n        var _a = this, timeGrid = _a.timeGrid, segsByCol = _a.segsByCol;\n        var colCnt = timeGrid.colCnt;\n        timeGrid.assignSegVerticals(allSegs); // horizontals relies on this\n        if (segsByCol) {\n            for (var col = 0; col < colCnt; col++) {\n                this.assignSegCss(segsByCol[col]);\n            }\n        }\n    };\n    // Computes a default event time formatting string if `eventTimeFormat` is not explicitly defined\n    TimeGridEventRenderer.prototype.computeEventTimeFormat = function () {\n        return {\n            hour: 'numeric',\n            minute: '2-digit',\n            meridiem: false\n        };\n    };\n    // Computes a default `displayEventEnd` value if one is not expliclty defined\n    TimeGridEventRenderer.prototype.computeDisplayEventEnd = function () {\n        return true;\n    };\n    // Renders the HTML for a single event segment's default rendering\n    TimeGridEventRenderer.prototype.renderSegHtml = function (seg, mirrorInfo) {\n        var eventRange = seg.eventRange;\n        var eventDef = eventRange.def;\n        var eventUi = eventRange.ui;\n        var allDay = eventDef.allDay;\n        var isDraggable = computeEventDraggable(this.context, eventDef, eventUi);\n        var isResizableFromStart = seg.isStart && computeEventStartResizable(this.context, eventDef, eventUi);\n        var isResizableFromEnd = seg.isEnd && computeEventEndResizable(this.context, eventDef, eventUi);\n        var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd, mirrorInfo);\n        var skinCss = cssToStr(this.getSkinCss(eventUi));\n        var timeText;\n        var fullTimeText; // more verbose time text. for the print stylesheet\n        var startTimeText; // just the start time text\n        classes.unshift('fc-time-grid-event');\n        // if the event appears to span more than one day...\n        if (isMultiDayRange(eventRange.range)) {\n            // Don't display time text on segments that run entirely through a day.\n            // That would appear as midnight-midnight and would look dumb.\n            // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n            if (seg.isStart || seg.isEnd) {\n                var unzonedStart = seg.start;\n                var unzonedEnd = seg.end;\n                timeText = this._getTimeText(unzonedStart, unzonedEnd, allDay); // TODO: give the timezones\n                fullTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, this.fullTimeFormat);\n                startTimeText = this._getTimeText(unzonedStart, unzonedEnd, allDay, null, false); // displayEnd=false\n            }\n        }\n        else {\n            // Display the normal time text for the *event's* times\n            timeText = this.getTimeText(eventRange);\n            fullTimeText = this.getTimeText(eventRange, this.fullTimeFormat);\n            startTimeText = this.getTimeText(eventRange, null, false); // displayEnd=false\n        }\n        return '<a class=\"' + classes.join(' ') + '\"' +\n            (eventDef.url ?\n                ' href=\"' + htmlEscape(eventDef.url) + '\"' :\n                '') +\n            (skinCss ?\n                ' style=\"' + skinCss + '\"' :\n                '') +\n            '>' +\n            '<div class=\"fc-content\">' +\n            (timeText ?\n                '<div class=\"fc-time\"' +\n                    ' data-start=\"' + htmlEscape(startTimeText) + '\"' +\n                    ' data-full=\"' + htmlEscape(fullTimeText) + '\"' +\n                    '>' +\n                    '<span>' + htmlEscape(timeText) + '</span>' +\n                    '</div>' :\n                '') +\n            (eventDef.title ?\n                '<div class=\"fc-title\">' +\n                    htmlEscape(eventDef.title) +\n                    '</div>' :\n                '') +\n            '</div>' +\n            /* TODO: write CSS for this\n            (isResizableFromStart ?\n              '<div class=\"fc-resizer fc-start-resizer\"></div>' :\n              ''\n              ) +\n            */\n            (isResizableFromEnd ?\n                '<div class=\"fc-resizer fc-end-resizer\"></div>' :\n                '') +\n            '</a>';\n    };\n    // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n    // Assumed the segs are already ordered.\n    // NOTE: Also reorders the given array by date!\n    TimeGridEventRenderer.prototype.computeSegHorizontals = function (segs) {\n        var levels;\n        var level0;\n        var i;\n        levels = buildSlotSegLevels(segs);\n        computeForwardSlotSegs(levels);\n        if ((level0 = levels[0])) {\n            for (i = 0; i < level0.length; i++) {\n                computeSlotSegPressures(level0[i]);\n            }\n            for (i = 0; i < level0.length; i++) {\n                this.computeSegForwardBack(level0[i], 0, 0);\n            }\n        }\n    };\n    // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n    // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n    // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n    //\n    // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n    // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n    // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n    // coordinate of the first segment in the series.\n    TimeGridEventRenderer.prototype.computeSegForwardBack = function (seg, seriesBackwardPressure, seriesBackwardCoord) {\n        var forwardSegs = seg.forwardSegs;\n        var i;\n        if (seg.forwardCoord === undefined) { // not already computed\n            if (!forwardSegs.length) {\n                // if there are no forward segments, this segment should butt up against the edge\n                seg.forwardCoord = 1;\n            }\n            else {\n                // sort highest pressure first\n                this.sortForwardSegs(forwardSegs);\n                // this segment's forwardCoord will be calculated from the backwardCoord of the\n                // highest-pressure forward segment.\n                this.computeSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n                seg.forwardCoord = forwardSegs[0].backwardCoord;\n            }\n            // calculate the backwardCoord from the forwardCoord. consider the series\n            seg.backwardCoord = seg.forwardCoord -\n                (seg.forwardCoord - seriesBackwardCoord) / // available width for series\n                    (seriesBackwardPressure + 1); // # of segments in the series\n            // use this segment's coordinates to computed the coordinates of the less-pressurized\n            // forward segments\n            for (i = 0; i < forwardSegs.length; i++) {\n                this.computeSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n            }\n        }\n    };\n    TimeGridEventRenderer.prototype.sortForwardSegs = function (forwardSegs) {\n        var objs = forwardSegs.map(buildTimeGridSegCompareObj);\n        var specs = [\n            // put higher-pressure first\n            { field: 'forwardPressure', order: -1 },\n            // put segments that are closer to initial edge first (and favor ones with no coords yet)\n            { field: 'backwardCoord', order: 1 }\n        ].concat(this.context.eventOrderSpecs);\n        objs.sort(function (obj0, obj1) {\n            return compareByFieldSpecs(obj0, obj1, specs);\n        });\n        return objs.map(function (c) {\n            return c._seg;\n        });\n    };\n    // Given foreground event segments that have already had their position coordinates computed,\n    // assigns position-related CSS values to their elements.\n    TimeGridEventRenderer.prototype.assignSegCss = function (segs) {\n        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n            var seg = segs_1[_i];\n            applyStyle(seg.el, this.generateSegCss(seg));\n            if (seg.level > 0) {\n                seg.el.classList.add('fc-time-grid-event-inset');\n            }\n            // if the event is short that the title will be cut off,\n            // attach a className that condenses the title into the time area.\n            if (seg.eventRange.def.title && seg.bottom - seg.top < 30) {\n                seg.el.classList.add('fc-short'); // TODO: \"condensed\" is a better name\n            }\n        }\n    };\n    // Generates an object with CSS properties/values that should be applied to an event segment element.\n    // Contains important positioning-related properties that should be applied to any event element, customized or not.\n    TimeGridEventRenderer.prototype.generateSegCss = function (seg) {\n        var shouldOverlap = this.context.options.slotEventOverlap;\n        var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n        var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n        var props = this.timeGrid.generateSegVerticalCss(seg); // get top/bottom first\n        var isRtl = this.context.isRtl;\n        var left; // amount of space from left edge, a fraction of the total width\n        var right; // amount of space from right edge, a fraction of the total width\n        if (shouldOverlap) {\n            // double the width, but don't go beyond the maximum forward coordinate (1.0)\n            forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n        }\n        if (isRtl) {\n            left = 1 - forwardCoord;\n            right = backwardCoord;\n        }\n        else {\n            left = backwardCoord;\n            right = 1 - forwardCoord;\n        }\n        props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n        props.left = left * 100 + '%';\n        props.right = right * 100 + '%';\n        if (shouldOverlap && seg.forwardPressure) {\n            // add padding to the edge so that forward stacked events don't cover the resizer's icon\n            props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n        }\n        return props;\n    };\n    return TimeGridEventRenderer;\n}(FgEventRenderer));\n// Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n// left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\nfunction buildSlotSegLevels(segs) {\n    var levels = [];\n    var i;\n    var seg;\n    var j;\n    for (i = 0; i < segs.length; i++) {\n        seg = segs[i];\n        // go through all the levels and stop on the first level where there are no collisions\n        for (j = 0; j < levels.length; j++) {\n            if (!computeSlotSegCollisions(seg, levels[j]).length) {\n                break;\n            }\n        }\n        seg.level = j;\n        (levels[j] || (levels[j] = [])).push(seg);\n    }\n    return levels;\n}\n// For every segment, figure out the other segments that are in subsequent\n// levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\nfunction computeForwardSlotSegs(levels) {\n    var i;\n    var level;\n    var j;\n    var seg;\n    var k;\n    for (i = 0; i < levels.length; i++) {\n        level = levels[i];\n        for (j = 0; j < level.length; j++) {\n            seg = level[j];\n            seg.forwardSegs = [];\n            for (k = i + 1; k < levels.length; k++) {\n                computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n            }\n        }\n    }\n}\n// Figure out which path forward (via seg.forwardSegs) results in the longest path until\n// the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\nfunction computeSlotSegPressures(seg) {\n    var forwardSegs = seg.forwardSegs;\n    var forwardPressure = 0;\n    var i;\n    var forwardSeg;\n    if (seg.forwardPressure === undefined) { // not already computed\n        for (i = 0; i < forwardSegs.length; i++) {\n            forwardSeg = forwardSegs[i];\n            // figure out the child's maximum forward path\n            computeSlotSegPressures(forwardSeg);\n            // either use the existing maximum, or use the child's forward pressure\n            // plus one (for the forwardSeg itself)\n            forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n        }\n        seg.forwardPressure = forwardPressure;\n    }\n}\n// Find all the segments in `otherSegs` that vertically collide with `seg`.\n// Append into an optionally-supplied `results` array and return.\nfunction computeSlotSegCollisions(seg, otherSegs, results) {\n    if (results === void 0) { results = []; }\n    for (var i = 0; i < otherSegs.length; i++) {\n        if (isSlotSegCollision(seg, otherSegs[i])) {\n            results.push(otherSegs[i]);\n        }\n    }\n    return results;\n}\n// Do these segments occupy the same vertical space?\nfunction isSlotSegCollision(seg1, seg2) {\n    return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n}\nfunction buildTimeGridSegCompareObj(seg) {\n    var obj = buildSegCompareObj(seg);\n    obj.forwardPressure = seg.forwardPressure;\n    obj.backwardCoord = seg.backwardCoord;\n    return obj;\n}\n\nvar TimeGridMirrorRenderer = /** @class */ (function (_super) {\n    __extends(TimeGridMirrorRenderer, _super);\n    function TimeGridMirrorRenderer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeGridMirrorRenderer.prototype.attachSegs = function (segs, mirrorInfo) {\n        this.segsByCol = this.timeGrid.groupSegsByCol(segs);\n        this.timeGrid.attachSegsByCol(this.segsByCol, this.timeGrid.mirrorContainerEls);\n        this.sourceSeg = mirrorInfo.sourceSeg;\n    };\n    TimeGridMirrorRenderer.prototype.generateSegCss = function (seg) {\n        var props = _super.prototype.generateSegCss.call(this, seg);\n        var sourceSeg = this.sourceSeg;\n        if (sourceSeg && sourceSeg.col === seg.col) {\n            var sourceSegProps = _super.prototype.generateSegCss.call(this, sourceSeg);\n            props.left = sourceSegProps.left;\n            props.right = sourceSegProps.right;\n            props.marginLeft = sourceSegProps.marginLeft;\n            props.marginRight = sourceSegProps.marginRight;\n        }\n        return props;\n    };\n    return TimeGridMirrorRenderer;\n}(TimeGridEventRenderer));\n\nvar TimeGridFillRenderer = /** @class */ (function (_super) {\n    __extends(TimeGridFillRenderer, _super);\n    function TimeGridFillRenderer(timeGrid) {\n        var _this = _super.call(this) || this;\n        _this.timeGrid = timeGrid;\n        return _this;\n    }\n    TimeGridFillRenderer.prototype.attachSegs = function (type, segs) {\n        var timeGrid = this.timeGrid;\n        var containerEls;\n        // TODO: more efficient lookup\n        if (type === 'bgEvent') {\n            containerEls = timeGrid.bgContainerEls;\n        }\n        else if (type === 'businessHours') {\n            containerEls = timeGrid.businessContainerEls;\n        }\n        else if (type === 'highlight') {\n            containerEls = timeGrid.highlightContainerEls;\n        }\n        timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs), containerEls);\n        return segs.map(function (seg) {\n            return seg.el;\n        });\n    };\n    TimeGridFillRenderer.prototype.computeSegSizes = function (segs) {\n        this.timeGrid.computeSegVerticals(segs);\n    };\n    TimeGridFillRenderer.prototype.assignSegSizes = function (segs) {\n        this.timeGrid.assignSegVerticals(segs);\n    };\n    return TimeGridFillRenderer;\n}(FillRenderer));\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nvar AGENDA_STOCK_SUB_DURATIONS = [\n    { hours: 1 },\n    { minutes: 30 },\n    { minutes: 15 },\n    { seconds: 30 },\n    { seconds: 15 }\n];\nvar TimeGrid = /** @class */ (function (_super) {\n    __extends(TimeGrid, _super);\n    function TimeGrid(el, renderProps) {\n        var _this = _super.call(this, el) || this;\n        _this.isSlatSizesDirty = false;\n        _this.isColSizesDirty = false;\n        _this.processOptions = memoize(_this._processOptions);\n        _this.renderSkeleton = memoizeRendering(_this._renderSkeleton);\n        _this.renderSlats = memoizeRendering(_this._renderSlats, null, [_this.renderSkeleton]);\n        _this.renderColumns = memoizeRendering(_this._renderColumns, _this._unrenderColumns, [_this.renderSkeleton]);\n        _this.renderProps = renderProps;\n        var renderColumns = _this.renderColumns;\n        var eventRenderer = _this.eventRenderer = new TimeGridEventRenderer(_this);\n        var fillRenderer = _this.fillRenderer = new TimeGridFillRenderer(_this);\n        _this.mirrorRenderer = new TimeGridMirrorRenderer(_this);\n        _this.renderBusinessHours = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'businessHours'), fillRenderer.unrender.bind(fillRenderer, 'businessHours'), [renderColumns]);\n        _this.renderDateSelection = memoizeRendering(_this._renderDateSelection, _this._unrenderDateSelection, [renderColumns]);\n        _this.renderFgEvents = memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer), eventRenderer.unrender.bind(eventRenderer), [renderColumns]);\n        _this.renderBgEvents = memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer, 'bgEvent'), fillRenderer.unrender.bind(fillRenderer, 'bgEvent'), [renderColumns]);\n        _this.renderEventSelection = memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer), eventRenderer.unselectByInstanceId.bind(eventRenderer), [_this.renderFgEvents]);\n        _this.renderEventDrag = memoizeRendering(_this._renderEventDrag, _this._unrenderEventDrag, [renderColumns]);\n        _this.renderEventResize = memoizeRendering(_this._renderEventResize, _this._unrenderEventResize, [renderColumns]);\n        return _this;\n    }\n    /* Options\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Parses various options into properties of this object\n    // MUST have context already set\n    TimeGrid.prototype._processOptions = function (options) {\n        var slotDuration = options.slotDuration, snapDuration = options.snapDuration;\n        var snapsPerSlot;\n        var input;\n        slotDuration = createDuration(slotDuration);\n        snapDuration = snapDuration ? createDuration(snapDuration) : slotDuration;\n        snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration);\n        if (snapsPerSlot === null) {\n            snapDuration = slotDuration;\n            snapsPerSlot = 1;\n            // TODO: say warning?\n        }\n        this.slotDuration = slotDuration;\n        this.snapDuration = snapDuration;\n        this.snapsPerSlot = snapsPerSlot;\n        // might be an array value (for TimelineView).\n        // if so, getting the most granular entry (the last one probably).\n        input = options.slotLabelFormat;\n        if (Array.isArray(input)) {\n            input = input[input.length - 1];\n        }\n        this.labelFormat = createFormatter(input || {\n            hour: 'numeric',\n            minute: '2-digit',\n            omitZeroMinute: true,\n            meridiem: 'short'\n        });\n        input = options.slotLabelInterval;\n        this.labelInterval = input ?\n            createDuration(input) :\n            this.computeLabelInterval(slotDuration);\n    };\n    // Computes an automatic value for slotLabelInterval\n    TimeGrid.prototype.computeLabelInterval = function (slotDuration) {\n        var i;\n        var labelInterval;\n        var slotsPerLabel;\n        // find the smallest stock label interval that results in more than one slots-per-label\n        for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n            labelInterval = createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);\n            slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration);\n            if (slotsPerLabel !== null && slotsPerLabel > 1) {\n                return labelInterval;\n            }\n        }\n        return slotDuration; // fall back\n    };\n    /* Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.render = function (props, context) {\n        this.processOptions(context.options);\n        var cells = props.cells;\n        this.colCnt = cells.length;\n        this.renderSkeleton(context.theme);\n        this.renderSlats(props.dateProfile);\n        this.renderColumns(props.cells, props.dateProfile);\n        this.renderBusinessHours(context, props.businessHourSegs);\n        this.renderDateSelection(props.dateSelectionSegs);\n        this.renderFgEvents(context, props.fgEventSegs);\n        this.renderBgEvents(context, props.bgEventSegs);\n        this.renderEventSelection(props.eventSelection);\n        this.renderEventDrag(props.eventDrag);\n        this.renderEventResize(props.eventResize);\n    };\n    TimeGrid.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        // should unrender everything else too\n        this.renderSlats.unrender();\n        this.renderColumns.unrender();\n        this.renderSkeleton.unrender();\n    };\n    TimeGrid.prototype.updateSize = function (isResize) {\n        var _a = this, fillRenderer = _a.fillRenderer, eventRenderer = _a.eventRenderer, mirrorRenderer = _a.mirrorRenderer;\n        if (isResize || this.isSlatSizesDirty) {\n            this.buildSlatPositions();\n            this.isSlatSizesDirty = false;\n        }\n        if (isResize || this.isColSizesDirty) {\n            this.buildColPositions();\n            this.isColSizesDirty = false;\n        }\n        fillRenderer.computeSizes(isResize);\n        eventRenderer.computeSizes(isResize);\n        mirrorRenderer.computeSizes(isResize);\n        fillRenderer.assignSizes(isResize);\n        eventRenderer.assignSizes(isResize);\n        mirrorRenderer.assignSizes(isResize);\n    };\n    TimeGrid.prototype._renderSkeleton = function (theme) {\n        var el = this.el;\n        el.innerHTML =\n            '<div class=\"fc-bg\"></div>' +\n                '<div class=\"fc-slats\"></div>' +\n                '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" style=\"display:none\" />';\n        this.rootBgContainerEl = el.querySelector('.fc-bg');\n        this.slatContainerEl = el.querySelector('.fc-slats');\n        this.bottomRuleEl = el.querySelector('.fc-divider');\n    };\n    TimeGrid.prototype._renderSlats = function (dateProfile) {\n        var theme = this.context.theme;\n        this.slatContainerEl.innerHTML =\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                this.renderSlatRowHtml(dateProfile) +\n                '</table>';\n        this.slatEls = findElements(this.slatContainerEl, 'tr');\n        this.slatPositions = new PositionCache(this.el, this.slatEls, false, true // vertical\n        );\n        this.isSlatSizesDirty = true;\n    };\n    // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n    TimeGrid.prototype.renderSlatRowHtml = function (dateProfile) {\n        var _a = this.context, dateEnv = _a.dateEnv, theme = _a.theme, isRtl = _a.isRtl;\n        var html = '';\n        var dayStart = startOfDay(dateProfile.renderRange.start);\n        var slotTime = dateProfile.minTime;\n        var slotIterator = createDuration(0);\n        var slotDate; // will be on the view's first day, but we only care about its time\n        var isLabeled;\n        var axisHtml;\n        // Calculate the time for each slot\n        while (asRoughMs(slotTime) < asRoughMs(dateProfile.maxTime)) {\n            slotDate = dateEnv.add(dayStart, slotTime);\n            isLabeled = wholeDivideDurations(slotIterator, this.labelInterval) !== null;\n            axisHtml =\n                '<td class=\"fc-axis fc-time ' + theme.getClass('widgetContent') + '\">' +\n                    (isLabeled ?\n                        '<span>' + // for matchCellWidths\n                            htmlEscape(dateEnv.format(slotDate, this.labelFormat)) +\n                            '</span>' :\n                        '') +\n                    '</td>';\n            html +=\n                '<tr data-time=\"' + formatIsoTimeString(slotDate) + '\"' +\n                    (isLabeled ? '' : ' class=\"fc-minor\"') +\n                    '>' +\n                    (!isRtl ? axisHtml : '') +\n                    '<td class=\"' + theme.getClass('widgetContent') + '\"></td>' +\n                    (isRtl ? axisHtml : '') +\n                    '</tr>';\n            slotTime = addDurations(slotTime, this.slotDuration);\n            slotIterator = addDurations(slotIterator, this.slotDuration);\n        }\n        return html;\n    };\n    TimeGrid.prototype._renderColumns = function (cells, dateProfile) {\n        var _a = this.context, calendar = _a.calendar, view = _a.view, isRtl = _a.isRtl, theme = _a.theme, dateEnv = _a.dateEnv;\n        var bgRow = new DayBgRow(this.context);\n        this.rootBgContainerEl.innerHTML =\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n                bgRow.renderHtml({\n                    cells: cells,\n                    dateProfile: dateProfile,\n                    renderIntroHtml: this.renderProps.renderBgIntroHtml\n                }) +\n                '</table>';\n        this.colEls = findElements(this.el, '.fc-day, .fc-disabled-day');\n        for (var col = 0; col < this.colCnt; col++) {\n            calendar.publiclyTrigger('dayRender', [\n                {\n                    date: dateEnv.toDate(cells[col].date),\n                    el: this.colEls[col],\n                    view: view\n                }\n            ]);\n        }\n        if (isRtl) {\n            this.colEls.reverse();\n        }\n        this.colPositions = new PositionCache(this.el, this.colEls, true, // horizontal\n        false);\n        this.renderContentSkeleton();\n        this.isColSizesDirty = true;\n    };\n    TimeGrid.prototype._unrenderColumns = function () {\n        this.unrenderContentSkeleton();\n    };\n    /* Content Skeleton\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Renders the DOM that the view's content will live in\n    TimeGrid.prototype.renderContentSkeleton = function () {\n        var isRtl = this.context.isRtl;\n        var parts = [];\n        var skeletonEl;\n        parts.push(this.renderProps.renderIntroHtml());\n        for (var i = 0; i < this.colCnt; i++) {\n            parts.push('<td>' +\n                '<div class=\"fc-content-col\">' +\n                '<div class=\"fc-event-container fc-mirror-container\"></div>' +\n                '<div class=\"fc-event-container\"></div>' +\n                '<div class=\"fc-highlight-container\"></div>' +\n                '<div class=\"fc-bgevent-container\"></div>' +\n                '<div class=\"fc-business-container\"></div>' +\n                '</div>' +\n                '</td>');\n        }\n        if (isRtl) {\n            parts.reverse();\n        }\n        skeletonEl = this.contentSkeletonEl = htmlToElement('<div class=\"fc-content-skeleton\">' +\n            '<table>' +\n            '<tr>' + parts.join('') + '</tr>' +\n            '</table>' +\n            '</div>');\n        this.colContainerEls = findElements(skeletonEl, '.fc-content-col');\n        this.mirrorContainerEls = findElements(skeletonEl, '.fc-mirror-container');\n        this.fgContainerEls = findElements(skeletonEl, '.fc-event-container:not(.fc-mirror-container)');\n        this.bgContainerEls = findElements(skeletonEl, '.fc-bgevent-container');\n        this.highlightContainerEls = findElements(skeletonEl, '.fc-highlight-container');\n        this.businessContainerEls = findElements(skeletonEl, '.fc-business-container');\n        if (isRtl) {\n            this.colContainerEls.reverse();\n            this.mirrorContainerEls.reverse();\n            this.fgContainerEls.reverse();\n            this.bgContainerEls.reverse();\n            this.highlightContainerEls.reverse();\n            this.businessContainerEls.reverse();\n        }\n        this.el.appendChild(skeletonEl);\n    };\n    TimeGrid.prototype.unrenderContentSkeleton = function () {\n        removeElement(this.contentSkeletonEl);\n    };\n    // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n    TimeGrid.prototype.groupSegsByCol = function (segs) {\n        var segsByCol = [];\n        var i;\n        for (i = 0; i < this.colCnt; i++) {\n            segsByCol.push([]);\n        }\n        for (i = 0; i < segs.length; i++) {\n            segsByCol[segs[i].col].push(segs[i]);\n        }\n        return segsByCol;\n    };\n    // Given segments grouped by column, insert the segments' elements into a parallel array of container\n    // elements, each living within a column.\n    TimeGrid.prototype.attachSegsByCol = function (segsByCol, containerEls) {\n        var col;\n        var segs;\n        var i;\n        for (col = 0; col < this.colCnt; col++) { // iterate each column grouping\n            segs = segsByCol[col];\n            for (i = 0; i < segs.length; i++) {\n                containerEls[col].appendChild(segs[i].el);\n            }\n        }\n    };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.getNowIndicatorUnit = function () {\n        return 'minute'; // will refresh on the minute\n    };\n    TimeGrid.prototype.renderNowIndicator = function (segs, date) {\n        // HACK: if date columns not ready for some reason (scheduler)\n        if (!this.colContainerEls) {\n            return;\n        }\n        var top = this.computeDateTop(date);\n        var nodes = [];\n        var i;\n        // render lines within the columns\n        for (i = 0; i < segs.length; i++) {\n            var lineEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-line' });\n            lineEl.style.top = top + 'px';\n            this.colContainerEls[segs[i].col].appendChild(lineEl);\n            nodes.push(lineEl);\n        }\n        // render an arrow over the axis\n        if (segs.length > 0) { // is the current time in view?\n            var arrowEl = createElement('div', { className: 'fc-now-indicator fc-now-indicator-arrow' });\n            arrowEl.style.top = top + 'px';\n            this.contentSkeletonEl.appendChild(arrowEl);\n            nodes.push(arrowEl);\n        }\n        this.nowIndicatorEls = nodes;\n    };\n    TimeGrid.prototype.unrenderNowIndicator = function () {\n        if (this.nowIndicatorEls) {\n            this.nowIndicatorEls.forEach(removeElement);\n            this.nowIndicatorEls = null;\n        }\n    };\n    /* Coordinates\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.getTotalSlatHeight = function () {\n        return this.slatContainerEl.getBoundingClientRect().height;\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n    // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n    TimeGrid.prototype.computeDateTop = function (when, startOfDayDate) {\n        if (!startOfDayDate) {\n            startOfDayDate = startOfDay(when);\n        }\n        return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()));\n    };\n    // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n    TimeGrid.prototype.computeTimeTop = function (duration) {\n        var len = this.slatEls.length;\n        var dateProfile = this.props.dateProfile;\n        var slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.minTime)) / asRoughMs(this.slotDuration); // floating-point value of # of slots covered\n        var slatIndex;\n        var slatRemainder;\n        // compute a floating-point number for how many slats should be progressed through.\n        // from 0 to number of slats (inclusive)\n        // constrained because minTime/maxTime might be customized.\n        slatCoverage = Math.max(0, slatCoverage);\n        slatCoverage = Math.min(len, slatCoverage);\n        // an integer index of the furthest whole slat\n        // from 0 to number slats (*exclusive*, so len-1)\n        slatIndex = Math.floor(slatCoverage);\n        slatIndex = Math.min(slatIndex, len - 1);\n        // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n        // could be 1.0 if slatCoverage is covering *all* the slots\n        slatRemainder = slatCoverage - slatIndex;\n        return this.slatPositions.tops[slatIndex] +\n            this.slatPositions.getHeight(slatIndex) * slatRemainder;\n    };\n    // For each segment in an array, computes and assigns its top and bottom properties\n    TimeGrid.prototype.computeSegVerticals = function (segs) {\n        var options = this.context.options;\n        var eventMinHeight = options.timeGridEventMinHeight;\n        var i;\n        var seg;\n        var dayDate;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            dayDate = this.props.cells[seg.col].date;\n            seg.top = this.computeDateTop(seg.start, dayDate);\n            seg.bottom = Math.max(seg.top + eventMinHeight, this.computeDateTop(seg.end, dayDate));\n        }\n    };\n    // Given segments that already have their top/bottom properties computed, applies those values to\n    // the segments' elements.\n    TimeGrid.prototype.assignSegVerticals = function (segs) {\n        var i;\n        var seg;\n        for (i = 0; i < segs.length; i++) {\n            seg = segs[i];\n            applyStyle(seg.el, this.generateSegVerticalCss(seg));\n        }\n    };\n    // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n    TimeGrid.prototype.generateSegVerticalCss = function (seg) {\n        return {\n            top: seg.top,\n            bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n        };\n    };\n    /* Sizing\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.buildPositionCaches = function () {\n        this.buildColPositions();\n        this.buildSlatPositions();\n    };\n    TimeGrid.prototype.buildColPositions = function () {\n        this.colPositions.build();\n    };\n    TimeGrid.prototype.buildSlatPositions = function () {\n        this.slatPositions.build();\n    };\n    /* Hit System\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype.positionToHit = function (positionLeft, positionTop) {\n        var dateEnv = this.context.dateEnv;\n        var _a = this, snapsPerSlot = _a.snapsPerSlot, slatPositions = _a.slatPositions, colPositions = _a.colPositions;\n        var colIndex = colPositions.leftToIndex(positionLeft);\n        var slatIndex = slatPositions.topToIndex(positionTop);\n        if (colIndex != null && slatIndex != null) {\n            var slatTop = slatPositions.tops[slatIndex];\n            var slatHeight = slatPositions.getHeight(slatIndex);\n            var partial = (positionTop - slatTop) / slatHeight; // floating point number between 0 and 1\n            var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n            var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n            var dayDate = this.props.cells[colIndex].date;\n            var time = addDurations(this.props.dateProfile.minTime, multiplyDuration(this.snapDuration, snapIndex));\n            var start = dateEnv.add(dayDate, time);\n            var end = dateEnv.add(start, this.snapDuration);\n            return {\n                col: colIndex,\n                dateSpan: {\n                    range: { start: start, end: end },\n                    allDay: false\n                },\n                dayEl: this.colEls[colIndex],\n                relativeRect: {\n                    left: colPositions.lefts[colIndex],\n                    right: colPositions.rights[colIndex],\n                    top: slatTop,\n                    bottom: slatTop + slatHeight\n                }\n            };\n        }\n    };\n    /* Event Drag Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype._renderEventDrag = function (state) {\n        if (state) {\n            this.eventRenderer.hideByHash(state.affectedInstances);\n            if (state.isEvent) {\n                this.mirrorRenderer.renderSegs(this.context, state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n            }\n            else {\n                this.fillRenderer.renderSegs('highlight', this.context, state.segs);\n            }\n        }\n    };\n    TimeGrid.prototype._unrenderEventDrag = function (state) {\n        if (state) {\n            this.eventRenderer.showByHash(state.affectedInstances);\n            if (state.isEvent) {\n                this.mirrorRenderer.unrender(this.context, state.segs, { isDragging: true, sourceSeg: state.sourceSeg });\n            }\n            else {\n                this.fillRenderer.unrender('highlight', this.context);\n            }\n        }\n    };\n    /* Event Resize Visualization\n    ------------------------------------------------------------------------------------------------------------------*/\n    TimeGrid.prototype._renderEventResize = function (state) {\n        if (state) {\n            this.eventRenderer.hideByHash(state.affectedInstances);\n            this.mirrorRenderer.renderSegs(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n        }\n    };\n    TimeGrid.prototype._unrenderEventResize = function (state) {\n        if (state) {\n            this.eventRenderer.showByHash(state.affectedInstances);\n            this.mirrorRenderer.unrender(this.context, state.segs, { isResizing: true, sourceSeg: state.sourceSeg });\n        }\n    };\n    /* Selection\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n    TimeGrid.prototype._renderDateSelection = function (segs) {\n        if (segs) {\n            if (this.context.options.selectMirror) {\n                this.mirrorRenderer.renderSegs(this.context, segs, { isSelecting: true });\n            }\n            else {\n                this.fillRenderer.renderSegs('highlight', this.context, segs);\n            }\n        }\n    };\n    TimeGrid.prototype._unrenderDateSelection = function (segs) {\n        if (segs) {\n            if (this.context.options.selectMirror) {\n                this.mirrorRenderer.unrender(this.context, segs, { isSelecting: true });\n            }\n            else {\n                this.fillRenderer.unrender('highlight', this.context);\n            }\n        }\n    };\n    return TimeGrid;\n}(DateComponent));\n\nvar AllDaySplitter = /** @class */ (function (_super) {\n    __extends(AllDaySplitter, _super);\n    function AllDaySplitter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AllDaySplitter.prototype.getKeyInfo = function () {\n        return {\n            allDay: {},\n            timed: {}\n        };\n    };\n    AllDaySplitter.prototype.getKeysForDateSpan = function (dateSpan) {\n        if (dateSpan.allDay) {\n            return ['allDay'];\n        }\n        else {\n            return ['timed'];\n        }\n    };\n    AllDaySplitter.prototype.getKeysForEventDef = function (eventDef) {\n        if (!eventDef.allDay) {\n            return ['timed'];\n        }\n        else if (hasBgRendering(eventDef)) {\n            return ['timed', 'allDay'];\n        }\n        else {\n            return ['allDay'];\n        }\n    };\n    return AllDaySplitter;\n}(Splitter));\n\nvar TIMEGRID_ALL_DAY_EVENT_LIMIT = 5;\nvar WEEK_HEADER_FORMAT = createFormatter({ week: 'short' });\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\nvar AbstractTimeGridView = /** @class */ (function (_super) {\n    __extends(AbstractTimeGridView, _super);\n    function AbstractTimeGridView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.splitter = new AllDaySplitter();\n        _this.renderSkeleton = memoizeRendering(_this._renderSkeleton, _this._unrenderSkeleton);\n        /* Header Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that will go before the day-of week header cells\n        _this.renderHeadIntroHtml = function () {\n            var _a = _this.context, theme = _a.theme, dateEnv = _a.dateEnv, options = _a.options;\n            var range = _this.props.dateProfile.renderRange;\n            var dayCnt = diffDays(range.start, range.end);\n            var weekText;\n            if (options.weekNumbers) {\n                weekText = dateEnv.format(range.start, WEEK_HEADER_FORMAT);\n                return '' +\n                    '<th class=\"fc-axis fc-week-number ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '>' +\n                    buildGotoAnchorHtml(// aside from link, important for matchCellWidths\n                    options, dateEnv, { date: range.start, type: 'week', forceOff: dayCnt > 1 }, htmlEscape(weekText) // inner HTML\n                    ) +\n                    '</th>';\n            }\n            else {\n                return '<th class=\"fc-axis ' + theme.getClass('widgetHeader') + '\" ' + _this.axisStyleAttr() + '></th>';\n            }\n        };\n        /* Time Grid Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n        _this.renderTimeGridBgIntroHtml = function () {\n            var theme = _this.context.theme;\n            return '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '></td>';\n        };\n        // Generates the HTML that goes before all other types of cells.\n        // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n        _this.renderTimeGridIntroHtml = function () {\n            return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n        };\n        /* Day Grid Render Methods\n        ------------------------------------------------------------------------------------------------------------------*/\n        // Generates the HTML that goes before the all-day cells\n        _this.renderDayGridBgIntroHtml = function () {\n            var _a = _this.context, theme = _a.theme, options = _a.options;\n            return '' +\n                '<td class=\"fc-axis ' + theme.getClass('widgetContent') + '\" ' + _this.axisStyleAttr() + '>' +\n                '<span>' + // needed for matchCellWidths\n                getAllDayHtml(options) +\n                '</span>' +\n                '</td>';\n        };\n        // Generates the HTML that goes before all other types of cells.\n        // Affects content-skeleton, mirror-skeleton, highlight-skeleton for both the time-grid and day-grid.\n        _this.renderDayGridIntroHtml = function () {\n            return '<td class=\"fc-axis\" ' + _this.axisStyleAttr() + '></td>';\n        };\n        return _this;\n    }\n    AbstractTimeGridView.prototype.render = function (props, context) {\n        _super.prototype.render.call(this, props, context);\n        this.renderSkeleton(context);\n    };\n    AbstractTimeGridView.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.renderSkeleton.unrender();\n    };\n    AbstractTimeGridView.prototype._renderSkeleton = function (context) {\n        this.el.classList.add('fc-timeGrid-view');\n        this.el.innerHTML = this.renderSkeletonHtml();\n        this.scroller = new ScrollComponent('hidden', // overflow x\n        'auto' // overflow y\n        );\n        var timeGridWrapEl = this.scroller.el;\n        this.el.querySelector('.fc-body > tr > td').appendChild(timeGridWrapEl);\n        timeGridWrapEl.classList.add('fc-time-grid-container');\n        var timeGridEl = createElement('div', { className: 'fc-time-grid' });\n        timeGridWrapEl.appendChild(timeGridEl);\n        this.timeGrid = new TimeGrid(timeGridEl, {\n            renderBgIntroHtml: this.renderTimeGridBgIntroHtml,\n            renderIntroHtml: this.renderTimeGridIntroHtml\n        });\n        if (context.options.allDaySlot) { // should we display the \"all-day\" area?\n            this.dayGrid = new DayGrid(// the all-day subcomponent of this view\n            this.el.querySelector('.fc-day-grid'), {\n                renderNumberIntroHtml: this.renderDayGridIntroHtml,\n                renderBgIntroHtml: this.renderDayGridBgIntroHtml,\n                renderIntroHtml: this.renderDayGridIntroHtml,\n                colWeekNumbersVisible: false,\n                cellWeekNumbersVisible: false\n            });\n            // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n            var dividerEl = this.el.querySelector('.fc-divider');\n            this.dayGrid.bottomCoordPadding = dividerEl.getBoundingClientRect().height;\n        }\n    };\n    AbstractTimeGridView.prototype._unrenderSkeleton = function () {\n        this.el.classList.remove('fc-timeGrid-view');\n        this.timeGrid.destroy();\n        if (this.dayGrid) {\n            this.dayGrid.destroy();\n        }\n        this.scroller.destroy();\n    };\n    /* Rendering\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Builds the HTML skeleton for the view.\n    // The day-grid and time-grid components will render inside containers defined by this HTML.\n    AbstractTimeGridView.prototype.renderSkeletonHtml = function () {\n        var _a = this.context, theme = _a.theme, options = _a.options;\n        return '' +\n            '<table class=\"' + theme.getClass('tableGrid') + '\">' +\n            (options.columnHeader ?\n                '<thead class=\"fc-head\">' +\n                    '<tr>' +\n                    '<td class=\"fc-head-container ' + theme.getClass('widgetHeader') + '\">&nbsp;</td>' +\n                    '</tr>' +\n                    '</thead>' :\n                '') +\n            '<tbody class=\"fc-body\">' +\n            '<tr>' +\n            '<td class=\"' + theme.getClass('widgetContent') + '\">' +\n            (options.allDaySlot ?\n                '<div class=\"fc-day-grid\"></div>' +\n                    '<hr class=\"fc-divider ' + theme.getClass('widgetHeader') + '\" />' :\n                '') +\n            '</td>' +\n            '</tr>' +\n            '</tbody>' +\n            '</table>';\n    };\n    /* Now Indicator\n    ------------------------------------------------------------------------------------------------------------------*/\n    AbstractTimeGridView.prototype.getNowIndicatorUnit = function () {\n        return this.timeGrid.getNowIndicatorUnit();\n    };\n    // subclasses should implement\n    // renderNowIndicator(date: DateMarker) {\n    // }\n    AbstractTimeGridView.prototype.unrenderNowIndicator = function () {\n        this.timeGrid.unrenderNowIndicator();\n    };\n    /* Dimensions\n    ------------------------------------------------------------------------------------------------------------------*/\n    AbstractTimeGridView.prototype.updateSize = function (isResize, viewHeight, isAuto) {\n        _super.prototype.updateSize.call(this, isResize, viewHeight, isAuto); // will call updateBaseSize. important that executes first\n        this.timeGrid.updateSize(isResize);\n        if (this.dayGrid) {\n            this.dayGrid.updateSize(isResize);\n        }\n    };\n    // Adjusts the vertical dimensions of the view to the specified values\n    AbstractTimeGridView.prototype.updateBaseSize = function (isResize, viewHeight, isAuto) {\n        var _this = this;\n        var eventLimit;\n        var scrollerHeight;\n        var scrollbarWidths;\n        // make all axis cells line up\n        this.axisWidth = matchCellWidths(findElements(this.el, '.fc-axis'));\n        // hack to give the view some height prior to timeGrid's columns being rendered\n        // TODO: separate setting height from scroller VS timeGrid.\n        if (!this.timeGrid.colEls) {\n            if (!isAuto) {\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n            }\n            return;\n        }\n        // set of fake row elements that must compensate when scroller has scrollbars\n        var noScrollRowEls = findElements(this.el, '.fc-row').filter(function (node) {\n            return !_this.scroller.el.contains(node);\n        });\n        // reset all dimensions back to the original state\n        this.timeGrid.bottomRuleEl.style.display = 'none'; // will be shown later if this <hr> is necessary\n        this.scroller.clear(); // sets height to 'auto' and clears overflow\n        noScrollRowEls.forEach(uncompensateScroll);\n        // limit number of events in the all-day area\n        if (this.dayGrid) {\n            this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n            eventLimit = this.context.options.eventLimit;\n            if (eventLimit && typeof eventLimit !== 'number') {\n                eventLimit = TIMEGRID_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n            }\n            if (eventLimit) {\n                this.dayGrid.limitRows(eventLimit);\n            }\n        }\n        if (!isAuto) { // should we force dimensions of the scroll container?\n            scrollerHeight = this.computeScrollerHeight(viewHeight);\n            this.scroller.setHeight(scrollerHeight);\n            scrollbarWidths = this.scroller.getScrollbarWidths();\n            if (scrollbarWidths.left || scrollbarWidths.right) { // using scrollbars?\n                // make the all-day and header rows lines up\n                noScrollRowEls.forEach(function (rowEl) {\n                    compensateScroll(rowEl, scrollbarWidths);\n                });\n                // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n                // and reapply the desired height to the scroller.\n                scrollerHeight = this.computeScrollerHeight(viewHeight);\n                this.scroller.setHeight(scrollerHeight);\n            }\n            // guarantees the same scrollbar widths\n            this.scroller.lockOverflow(scrollbarWidths);\n            // if there's any space below the slats, show the horizontal rule.\n            // this won't cause any new overflow, because lockOverflow already called.\n            if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n                this.timeGrid.bottomRuleEl.style.display = '';\n            }\n        }\n    };\n    // given a desired total height of the view, returns what the height of the scroller should be\n    AbstractTimeGridView.prototype.computeScrollerHeight = function (viewHeight) {\n        return viewHeight -\n            subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n    };\n    /* Scroll\n    ------------------------------------------------------------------------------------------------------------------*/\n    // Computes the initial pre-configured scroll state prior to allowing the user to change it\n    AbstractTimeGridView.prototype.computeDateScroll = function (duration) {\n        var top = this.timeGrid.computeTimeTop(duration);\n        // zoom can give weird floating-point values. rather scroll a little bit further\n        top = Math.ceil(top);\n        if (top) {\n            top++; // to overcome top border that slots beyond the first have. looks better\n        }\n        return { top: top };\n    };\n    AbstractTimeGridView.prototype.queryDateScroll = function () {\n        return { top: this.scroller.getScrollTop() };\n    };\n    AbstractTimeGridView.prototype.applyDateScroll = function (scroll) {\n        if (scroll.top !== undefined) {\n            this.scroller.setScrollTop(scroll.top);\n        }\n    };\n    // Generates an HTML attribute string for setting the width of the axis, if it is known\n    AbstractTimeGridView.prototype.axisStyleAttr = function () {\n        if (this.axisWidth != null) {\n            return 'style=\"width:' + this.axisWidth + 'px\"';\n        }\n        return '';\n    };\n    return AbstractTimeGridView;\n}(View));\nAbstractTimeGridView.prototype.usesMinMaxTime = true; // indicates that minTime/maxTime affects rendering\n\nvar SimpleTimeGrid = /** @class */ (function (_super) {\n    __extends(SimpleTimeGrid, _super);\n    function SimpleTimeGrid(timeGrid) {\n        var _this = _super.call(this, timeGrid.el) || this;\n        _this.buildDayRanges = memoize(buildDayRanges);\n        _this.slicer = new TimeGridSlicer();\n        _this.timeGrid = timeGrid;\n        return _this;\n    }\n    SimpleTimeGrid.prototype.firstContext = function (context) {\n        context.calendar.registerInteractiveComponent(this, {\n            el: this.timeGrid.el\n        });\n    };\n    SimpleTimeGrid.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        this.context.calendar.unregisterInteractiveComponent(this);\n    };\n    SimpleTimeGrid.prototype.render = function (props, context) {\n        var dateEnv = this.context.dateEnv;\n        var dateProfile = props.dateProfile, dayTable = props.dayTable;\n        var dayRanges = this.dayRanges = this.buildDayRanges(dayTable, dateProfile, dateEnv);\n        this.timeGrid.receiveProps(__assign({}, this.slicer.sliceProps(props, dateProfile, null, context.calendar, this.timeGrid, dayRanges), { dateProfile: dateProfile, cells: dayTable.cells[0] }), context);\n    };\n    SimpleTimeGrid.prototype.renderNowIndicator = function (date) {\n        this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date, this.timeGrid, this.dayRanges), date);\n    };\n    SimpleTimeGrid.prototype.buildPositionCaches = function () {\n        this.timeGrid.buildPositionCaches();\n    };\n    SimpleTimeGrid.prototype.queryHit = function (positionLeft, positionTop) {\n        var rawHit = this.timeGrid.positionToHit(positionLeft, positionTop);\n        if (rawHit) {\n            return {\n                component: this.timeGrid,\n                dateSpan: rawHit.dateSpan,\n                dayEl: rawHit.dayEl,\n                rect: {\n                    left: rawHit.relativeRect.left,\n                    right: rawHit.relativeRect.right,\n                    top: rawHit.relativeRect.top,\n                    bottom: rawHit.relativeRect.bottom\n                },\n                layer: 0\n            };\n        }\n    };\n    return SimpleTimeGrid;\n}(DateComponent));\nfunction buildDayRanges(dayTable, dateProfile, dateEnv) {\n    var ranges = [];\n    for (var _i = 0, _a = dayTable.headerDates; _i < _a.length; _i++) {\n        var date = _a[_i];\n        ranges.push({\n            start: dateEnv.add(date, dateProfile.minTime),\n            end: dateEnv.add(date, dateProfile.maxTime)\n        });\n    }\n    return ranges;\n}\nvar TimeGridSlicer = /** @class */ (function (_super) {\n    __extends(TimeGridSlicer, _super);\n    function TimeGridSlicer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    TimeGridSlicer.prototype.sliceRange = function (range, dayRanges) {\n        var segs = [];\n        for (var col = 0; col < dayRanges.length; col++) {\n            var segRange = intersectRanges(range, dayRanges[col]);\n            if (segRange) {\n                segs.push({\n                    start: segRange.start,\n                    end: segRange.end,\n                    isStart: segRange.start.valueOf() === range.start.valueOf(),\n                    isEnd: segRange.end.valueOf() === range.end.valueOf(),\n                    col: col\n                });\n            }\n        }\n        return segs;\n    };\n    return TimeGridSlicer;\n}(Slicer));\n\nvar TimeGridView = /** @class */ (function (_super) {\n    __extends(TimeGridView, _super);\n    function TimeGridView() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.buildDayTable = memoize(buildDayTable);\n        return _this;\n    }\n    TimeGridView.prototype.render = function (props, context) {\n        _super.prototype.render.call(this, props, context); // for flags for updateSize. also _renderSkeleton/_unrenderSkeleton\n        var _a = this.props, dateProfile = _a.dateProfile, dateProfileGenerator = _a.dateProfileGenerator;\n        var nextDayThreshold = context.nextDayThreshold;\n        var dayTable = this.buildDayTable(dateProfile, dateProfileGenerator);\n        var splitProps = this.splitter.splitProps(props);\n        if (this.header) {\n            this.header.receiveProps({\n                dateProfile: dateProfile,\n                dates: dayTable.headerDates,\n                datesRepDistinctDays: true,\n                renderIntroHtml: this.renderHeadIntroHtml\n            }, context);\n        }\n        this.simpleTimeGrid.receiveProps(__assign({}, splitProps['timed'], { dateProfile: dateProfile,\n            dayTable: dayTable }), context);\n        if (this.simpleDayGrid) {\n            this.simpleDayGrid.receiveProps(__assign({}, splitProps['allDay'], { dateProfile: dateProfile,\n                dayTable: dayTable,\n                nextDayThreshold: nextDayThreshold, isRigid: false }), context);\n        }\n        this.startNowIndicator(dateProfile, dateProfileGenerator);\n    };\n    TimeGridView.prototype._renderSkeleton = function (context) {\n        _super.prototype._renderSkeleton.call(this, context);\n        if (context.options.columnHeader) {\n            this.header = new DayHeader(this.el.querySelector('.fc-head-container'));\n        }\n        this.simpleTimeGrid = new SimpleTimeGrid(this.timeGrid);\n        if (this.dayGrid) {\n            this.simpleDayGrid = new SimpleDayGrid(this.dayGrid);\n        }\n    };\n    TimeGridView.prototype._unrenderSkeleton = function () {\n        _super.prototype._unrenderSkeleton.call(this);\n        if (this.header) {\n            this.header.destroy();\n        }\n        this.simpleTimeGrid.destroy();\n        if (this.simpleDayGrid) {\n            this.simpleDayGrid.destroy();\n        }\n    };\n    TimeGridView.prototype.renderNowIndicator = function (date) {\n        this.simpleTimeGrid.renderNowIndicator(date);\n    };\n    return TimeGridView;\n}(AbstractTimeGridView));\nfunction buildDayTable(dateProfile, dateProfileGenerator) {\n    var daySeries = new DaySeries(dateProfile.renderRange, dateProfileGenerator);\n    return new DayTable(daySeries, false);\n}\n\nvar main = createPlugin({\n    defaultView: 'timeGridWeek',\n    views: {\n        timeGrid: {\n            class: TimeGridView,\n            allDaySlot: true,\n            slotDuration: '00:30:00',\n            slotEventOverlap: true // a bad name. confused with overlap/constraint system\n        },\n        timeGridDay: {\n            type: 'timeGrid',\n            duration: { days: 1 }\n        },\n        timeGridWeek: {\n            type: 'timeGrid',\n            duration: { weeks: 1 }\n        }\n    }\n});\n\nexport default main;\nexport { AbstractTimeGridView, TimeGrid, TimeGridSlicer, TimeGridView, buildDayRanges, buildDayTable };\n"]},"metadata":{},"sourceType":"module"}