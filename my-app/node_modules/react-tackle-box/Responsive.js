"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.createResponsive = createResponsive;
exports.default = exports.breakpoints = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var matchers = new window.Map();
var defaultBreakpointValues = {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200
};
exports.breakpoints = defaultBreakpointValues;

function createResponsive(breakpointValues) {
  var breakpoints = Object.keys(breakpointValues);

  var getMinQuery = function getMinQuery(breakpoint) {
    return "(min-width: " + breakpointValues[breakpoint] + "px)";
  };

  var getMaxQuery = function getMaxQuery(breakpoint) {
    var next = Math.min(breakpoints.indexOf(breakpoint) + 1, breakpoints.length - 1);
    return "(max-width: " + (breakpointValues[breakpoints[next]] - 0.2) + "px)";
  };

  var Responsive =
  /*#__PURE__*/
  function (_React$Component) {
    (0, _inheritsLoose2.default)(Responsive, _React$Component);

    function Responsive() {
      var _this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.state = {
        query: ''
      };

      _this.handleChange = function () {
        if (_this.unmounted) return;

        _reactDom.default.unstable_batchedUpdates(function () {
          if (_this.unmounted) return;

          _this.forceUpdate();
        });
      };

      return _this;
    }

    Responsive.getDerivedStateFromProps = function getDerivedStateFromProps(props, prevState) {
      var query = '';

      for (var _i = 0; _i < breakpoints.length; _i++) {
        var key = breakpoints[_i];

        if (props[key + "Up"]) {
          query = getMinQuery(key);
        }

        if (props[key + "Down"]) {
          query += (query ? ' and ' : '') + getMaxQuery(key);
        }
      }

      return {
        query: query,
        lastQuery: prevState.query
      };
    };

    var _proto = Responsive.prototype;

    _proto.componentWillUnmount = function componentWillUnmount() {
      this.unmounted = true;

      if (this.unlisten) {
        this.unlisten();
        this.unlisten = null;
      }
    };

    _proto.matches = function matches() {
      var _this2 = this;

      var _this$state = this.state,
          query = _this$state.query,
          lastQuery = _this$state.lastQuery;

      if (query !== lastQuery && this.unlisten) {
        this.unlisten();
        this.unlisten = null;
      }

      var mql = matchers.get(query);

      if (!mql) {
        matchers.set(query, mql = window.matchMedia(query));
      }

      if (!this.unlisten) {
        mql.addListener(this.handleChange);

        this.unlisten = function () {
          return mql.removeListener(_this2.handleChange);
        };
      }

      return mql.matches;
    };

    _proto.render = function render() {
      var children = this.props.children;
      var matches = this.matches();
      if (typeof children === 'function') return children(matches);
      return matches ? children : null;
    };

    return Responsive;
  }(_react.default.Component);

  Responsive.breakpoints = breakpointValues;
  return Responsive;
}

var _default = createResponsive(defaultBreakpointValues);

exports.default = _default;