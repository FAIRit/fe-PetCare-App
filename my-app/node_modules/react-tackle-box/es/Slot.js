import _extends from "@babel/runtime/helpers/esm/extends";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import React from 'react';
import ReactDOM from 'react-dom';
import invariant from 'invariant';
export default function createSlot() {
  var anchor = null;
  var instance = null;

  var set = function set(el) {
    anchor = el;
    instance && instance.forceUpdate();
  };

  var Outlet =
  /*#__PURE__*/
  function (_React$Component) {
    _inheritsLoose(Outlet, _React$Component);

    function Outlet() {
      return _React$Component.apply(this, arguments) || this;
    }

    var _proto = Outlet.prototype;

    _proto.shouldComponentUpdate = function shouldComponentUpdate() {
      return false;
    };

    _proto.render = function render() {
      return React.createElement("div", _extends({
        ref: set
      }, this.props));
    };

    return Outlet;
  }(React.Component);

  var Entry =
  /*#__PURE__*/
  function (_React$Component2) {
    _inheritsLoose(Entry, _React$Component2);

    function Entry() {
      return _React$Component2.apply(this, arguments) || this;
    }

    var _proto2 = Entry.prototype;

    _proto2.componentDidMount = function componentDidMount() {
      !!instance ? process.env.NODE_ENV !== "production" ? invariant(false, 'Only one Entry per slot can be rendered at a time.') : invariant(false) : void 0;
      instance = this;
    };

    _proto2.componentWillUnmount = function componentWillUnmount() {
      instance = null;
    };

    _proto2.render = function render() {
      var _this$props = this.props,
          children = _this$props.children,
          waitForOutlet = _this$props.waitForOutlet;
      var child = typeof children === 'function' ? children(!anchor) : children;
      if (anchor) return ReactDOM.createPortal(child, anchor);
      return !waitForOutlet ? child : null;
    };

    return Entry;
  }(React.Component);

  Entry.propTypes = {
    waitForOutlet: function waitForOutlet() {}
  };
  return {
    Entry: Entry,
    Outlet: Outlet
  };
}